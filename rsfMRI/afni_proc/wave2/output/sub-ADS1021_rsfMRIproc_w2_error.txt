echo auto-generated by afni_proc.py, Sun Mar  3 19:52:35 2019
echo (version 6.16, July 5, 2018)
echo execution started: `date`
date
afni -ver
afni_history -check_date 3 May 2018
if ( 0 ) then
if ( 0 > 0 ) then
set subj = sub-ADS1021
endif
set output_dir = sub-ADS1021.results
if ( -d sub-ADS1021.results ) then
set runs = ( `count -digits 2 1 1` )
count -digits 2 1 1
mkdir sub-ADS1021.results
mkdir sub-ADS1021.results/stimuli
3dcopy /projects/adapt_lab/shared/ADS/data/BIDS_data/derivatives/freesurfer/sub-ADS1021_ses-wave2.long.sub-ADS1021/SUMA/sub-ADS1021_SurfVol.nii.gz sub-ADS1021.results/sub-ADS1021_SurfVol
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dcopy /projects/adapt_lab/shared/ADS/data/BIDS_data/derivatives/freesurfer/sub-ADS1021_ses-wave2.long.sub-ADS1021/SUMA/aparc.a2009s+aseg_rank.nii.gz sub-ADS1021.results/copy_af_aaseg
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dcopy /projects/adapt_lab/shared/ADS/data/BIDS_data/derivatives/freesurfer/sub-ADS1021_ses-wave2.long.sub-ADS1021/SUMA/aparc.a2009s+aseg_rank.nii.gz sub-ADS1021.results/copy_af_aeseg
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dcopy /projects/adapt_lab/shared/ADS/data/BIDS_data/derivatives/freesurfer/sub-ADS1021_ses-wave2.long.sub-ADS1021/SUMA/sub-ADS1021_vent.nii.gz sub-ADS1021.results/copy_af_FSvent
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dcopy /projects/adapt_lab/shared/ADS/data/BIDS_data/derivatives/freesurfer/sub-ADS1021_ses-wave2.long.sub-ADS1021/SUMA/sub-ADS1021_WM.nii.gz sub-ADS1021.results/copy_af_FSWe
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dTcat -prefix sub-ADS1021.results/pb00.sub-ADS1021.r01.tcat /projects/adapt_lab/shared/ADS/data/BIDS_data/sub-ADS1021/ses-wave2/func/sub-ADS1021_ses-wave2_task-rest_bold.nii.gz[5..$]
++ 3dTcat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ elapsed time = 1.8 s
set tr_counts = ( 505 )
cd sub-ADS1021.results
touch out.pre_ss_warn.txt
foreach run ( 01 )
3dToutcount -automask -fraction -polort 5 -legendre pb00.sub-ADS1021.r01.tcat+orig
++ 3dToutcount: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-ADS1021.r01.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-ADS1021.r01.tcat+orig.BRIK is 4.785283 degrees from plumb.
++ 23800 voxels passed mask/clip
1deval -a outcount.r01.1D -expr 1-step(a-0.1)
if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
1deval -a outcount.r01.1D{0} -expr step(a-0.4)
end
cat outcount.r01.1D
cat rm.out.cen.r01.1D
set minindex = `3dTstat -argmin -prefix - outcount_rall.1D\'`
3dTstat -argmin -prefix - outcount_rall.1D'
++ 3dTstat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: KR Hammett & RW Cox
[7m*+ WARNING:[0m Input dataset is not 3D+time; assuming TR=1.0
set ovals = ( `1d_tool.py -set_run_lengths $tr_counts                       
                          -index_to_run_tr $minindex` )
1d_tool.py -set_run_lengths 505 -index_to_run_tr 3
set minoutrun = 01
set minouttr = 3
tee out.min_outlier.txt
echo min outlier: run 01, TR 3
foreach run ( 01 )
3dDespike -NEW -nomask -prefix pb01.sub-ADS1021.r01.despike pb00.sub-ADS1021.r01.tcat+orig
++ 3dDespike: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-ADS1021.r01.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-ADS1021.r01.tcat+orig.BRIK is 4.785283 degrees from plumb.
++ Input dataset is in short format, but output will be in float format
++ ignoring first 0 time points, using last 505
++ using 505 time points => -corder 17
++ Loading dataset pb00.sub-ADS1021.r01.tcat+orig
++ processing all 98304 voxels in dataset
++ Procesing time series with NEW model fit algorithm
++ smash edit thresholds: 3.1 .. 5.0 MADs
 +   [ 3.457% .. 0.072% of normal distribution]
 +   [ 8.839% .. 3.125% of Laplace distribution]
++ start OpenMP thread #0
..........................................
++ Elapsed despike time =  11s 176ms

++ FINAL: 48867840 data points, 2295429 edits [4.697%], 292485 big edits [0.599%]
++ Output dataset ./pb01.sub-ADS1021.r01.despike+orig.BRIK
end
3dbucket -prefix vr_base_min_outlier pb01.sub-ADS1021.r01.despike+orig[3]
++ 3dbucket: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
align_epi_anat.py -anat2epi -anat sub-ADS1021_SurfVol+orig -save_skullstrip -suffix _al_junk -epi vr_base_min_outlier+orig -epi_base 0 -epi_strip 3dAutomask -giant_move -cost lpc+ZZ -volreg off -tshift off
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ 3dWarp: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: RW Cox
++ Output dataset ./__tt_sub-ADS1021_SurfVol_ns_ob+orig.BRIK
++ 3dbucket: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ 3dAutomask: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Emperor Zhark
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./__tt_vr_base_min_outlier_ts+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./__tt_vr_base_min_outlier_ts+orig.BRIK is 4.785283 degrees from plumb.
++ Loading dataset ./__tt_vr_base_min_outlier_ts+orig
++ Forming automask
 + Fixed clip level = 269.533813
 + Used gradual clip level = 228.548996 .. 324.477997
 + Number voxels above clip level = 24417
 + Clustering voxels ...
 + Largest cluster has 24175 voxels
 + Clustering voxels ...
 + Largest cluster has 23425 voxels
 + Filled   323 voxels in small holes; now have 23748 voxels
 + Clustering voxels ...
 + Largest cluster has 23747 voxels
 + Clustering non-brain voxels ...
 + Clustering voxels ...
 + Largest cluster has 74556 voxels
 + Mask now has 23748 voxels
++ 23748 voxels in the mask [out of 98304: 24.16%]
++ first  13 x-planes are zero [from R]
++ last   13 x-planes are zero [from L]
++ first   5 y-planes are zero [from P]
++ last    5 y-planes are zero [from A]
++ first   0 z-planes are zero [from I]
++ last    1 z-planes are zero [from S]
++ applying mask to original data
++ Writing masked data
++ Output dataset ./__tt_vr_base_min_outlier_ts_ns+orig.BRIK
++ CPU time = 0.000000 sec
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ Output dataset ././__tt_vr_base_min_outlier_ts_ns_wt+orig.BRIK
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
++ lpc+ parameters: hel=0.40 mi=0.20 nmi=0.20 crA=0.40 ov=0.40 [to be zeroed at Final iteration]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./__tt_vr_base_min_outlier_ts_ns_wt+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./__tt_vr_base_min_outlier_ts_ns_wt+orig.BRIK is 4.785283 degrees from plumb.
++ Oblique dataset:./__tt_vr_base_min_outlier_ts_ns+orig.BRIK is 4.785283 degrees from plumb.
++ Source dataset: ./__tt_sub-ADS1021_SurfVol_ns_ob+orig.HEAD
++ Base dataset:   ./__tt_vr_base_min_outlier_ts_ns+orig.HEAD
++ Loading datasets
++ 1651473 voxels in -source_automask+2
++ Zero-pad: zbot=4 ztop=3
++ 23748 voxels [18.7%] in weight mask
++ Output dataset ./__tt_sub-ADS1021_SurfVol_ns_ob_al_junk_wtal+orig.BRIK
++ Number of points for matching = 23748
++ NOTE: base and source coordinate systems have different handedness
 +       Orientations: base=Left handed (RPI); source=Right handed (RAI)
++ Local correlation: blok type = 'RHDD(14.2219)'
++ -lpc+ parameters: hel=0.40 mi=0.20 nmi=0.20 crA=0.40 ov=0.40 [to be zeroed at Final iteration]
++ base center of mass = 31.509 31.199 15.138 (index)
 + source center of mass = 126.427 140.425 138.492 (index)
 + source-target CM = 0.643 6.230 -15.113 (xyz)
 + center of mass shifts = 0.643 6.230 -15.113
++ shift param auto-range: -65.7..67.0 -60.1..72.6 -63.3..33.0
 + Range param#4 [z-angle] = -6.000000 .. 6.000000
 + Range param#5 [x-angle] = -6.000000 .. 6.000000
 + Range param#6 [y-angle] = -6.000000 .. 6.000000
 + Range param#1 [x-shift] = -9.357452 .. 10.642548
 + Range param#2 [y-shift] = -3.769852 .. 16.230148
 + Range param#3 [z-shift] = -25.112904 .. -5.112904
 + Range param#4 [z-angle] = -45.000000 .. 45.000000
 + Range param#5 [x-angle] = -45.000000 .. 45.000000
 + Range param#6 [y-angle] = -45.000000 .. 45.000000
 + Range param#1 [x-shift] = -39.357452 .. 40.642548
 + Range param#2 [y-shift] = -33.769852 .. 46.230148
 + Range param#3 [z-shift] = -55.112904 .. 24.887096
 + 12 free parameters
++ Normalized convergence radius = 0.000481
++ changing output grid spacing to 1.0000 mm
++ OpenMP thread count = 1
++ ======= Allineation of 1 sub-bricks using Local Pearson Signed + Others =======
 + source mask has 1651473 [out of 20315457] voxels
 + base mask has 33501 [out of 126976] voxels
++ ========== sub-brick #0 ========== [total CPU to here=0.0 s]
++ *** Coarse pass begins ***
 + * Enter alignment setup routine
 + - copying base image
 + - copying source image
 + - Smoothing base; radius=5.00
 + - Smoothing source; radius=5.00
 + !source mask fill: ubot=22 usiz=35.5
 + - copying weight image
 + - using 23748 points from base image [use_all=2]
 + * Exit alignment setup routine
 + - Search for coarse starting parameters
 +  - histogram: source clip 24.6478 .. 93.5673; base clip 182.176 .. 787.182
 +  - versus source range 4.89211 .. 93.0854; base range 0 .. 848.595
 + 20751 total points stored in 183 'RHDD(15.0752)' bloks
 + - number of free params = 6
 + - Testing (64+61)*64 params:#o+o-.+-o--..-+.-++$ + - best 45 costs found:
    0 v= 0.789685:   0.64   6.23 -15.11   0.00   0.00   0.00  [grid]
    1 v= 0.925189:  13.98  -7.10  -1.78 -15.00  15.00  15.00  [grid]
    2 v= 0.927852:  27.31  -7.10  -1.78 -15.00  15.00  30.00  [grid]
    3 v= 0.946915:  27.31  -7.10  -1.78  15.00  15.00  30.00  [grid]
    4 v= 0.966595: -12.69  -7.10  -1.78 -15.00  15.00 -15.00  [grid]
    5 v= 0.985177: -26.02  -7.10  -1.78 -15.00  15.00 -30.00  [grid]
    6 v= 0.990316:  33.13  -8.46  -3.31 -11.16   9.40  34.39  [rand]
    7 v= 1.010253: -12.69  -7.10  -1.78  15.00  15.00 -30.00  [grid]
    8 v= 1.015533:  13.98  -7.10  -1.78  15.00  15.00  15.00  [grid]
    9 v= 1.018487:  13.98 -20.44  -1.78  15.00  30.00  15.00  [grid]
   10 v= 1.027205: -13.56  -3.22 -10.27  15.99  13.53 -29.93  [rand]
   11 v= 1.029875:  33.13  -8.46  -3.31  11.16   9.40  34.39  [rand]
   12 v= 1.035373: -12.69  -7.10  -1.78  15.00  15.00 -15.00  [grid]
   13 v= 1.036942: -26.02  -7.10  -1.78 -30.00  15.00 -30.00  [grid]
   14 v= 1.037222:  13.98 -20.44  -1.78 -15.00  30.00  15.00  [grid]
   15 v= 1.075703:  26.95 -19.72   2.68  15.82  17.65  37.25  [rand]
   16 v= 1.093212:  25.33  10.84   1.27  -8.97 -18.72  30.56  [rand]
   17 v= 1.095108:  23.49 -17.34  -4.70  -5.91  29.74  29.45  [rand]
   18 v= 1.096868: -22.21 -17.34  -4.70  -5.91  29.74 -29.45  [rand]
   19 v= 1.104927: -12.69  -7.10  -1.78 -15.00  15.00 -30.00  [grid]
   20 v= 1.105196:  25.33  10.84   1.27   8.97 -18.72  30.56  [rand]
   21 v= 1.106340: -22.21 -17.34  -4.70   5.91  29.74 -29.45  [rand]
   22 v= 1.114036: -26.02  -7.10  -1.78  15.00  15.00 -30.00  [grid]
   23 v= 1.116515: -12.69 -20.44  -1.78 -15.00  30.00 -15.00  [grid]
   24 v= 1.116570:  27.31  -7.10  -1.78 -30.00  15.00  30.00  [grid]
   25 v= 1.129268: -12.69 -20.44  -1.78  15.00  15.00 -15.00  [grid]
   26 v= 1.131367:  23.49 -17.34  -4.70   5.91  29.74  29.45  [rand]
   27 v= 1.131696: -25.66 -19.72   2.68  15.82  17.65 -37.25  [rand]
   28 v= 1.137456:  13.98 -20.44  -1.78  15.00  15.00  15.00  [grid]
   29 v= 1.137980: -31.84  -8.46  -3.31 -11.16   9.40 -34.39  [rand]
   30 v= 1.138029: -12.69  19.56  -1.78 -15.00 -15.00 -15.00  [grid]
   31 v= 1.143500: -12.69  -7.10  -1.78 -30.00  15.00 -15.00  [grid]
   32 v= 1.144690: -25.66 -19.72   2.68 -15.82  17.65 -37.25  [rand]
   33 v= 1.146160:  27.31  -7.10  -1.78  30.00  15.00  30.00  [grid]
   34 v= 1.164115:  13.98 -20.44  -1.78 -15.00  15.00  15.00  [grid]
   35 v= 1.173115:  13.98  -7.10  -1.78 -30.00  15.00  15.00  [grid]
   36 v= 1.173806: -13.56  -3.22 -10.27 -15.99  13.53 -29.93  [rand]
   37 v= 1.174854: -12.69 -20.44  -1.78  15.00  30.00 -30.00  [grid]
   38 v= 1.182846: -12.69 -20.44  -1.78  15.00  30.00 -15.00  [grid]
   39 v= 1.188701: -31.84  -8.46  -3.31  11.16   9.40 -34.39  [rand]
   40 v= 1.191525: -24.05  10.84   1.27  -8.97 -18.72 -30.56  [rand]
   41 v= 1.202512:  13.98 -20.44  -1.78  30.00  30.00  15.00  [grid]
   42 v= 1.203934:  13.98  -7.10  -1.78 -15.00  15.00  30.00  [grid]
   43 v= 1.205327: -12.69 -20.44  -1.78 -15.00  30.00 -30.00  [grid]
   44 v= 1.209297: -12.69 -20.44  -1.78 -15.00  15.00 -15.00  [grid]
*[#8004=0.710373] *[#8010=0.673219] *[#8017=0.67196] *[#8018=0.668907] *[#8021=0.652931] *[#8028=0.652704] *[#8030=0.652274] *[#8047=0.651391] *[#8056=0.639548] *[#8063=0.637677] *[#8068=0.637594] *[#8069=0.635803] *[#8809=0.633384] *[#8811=0.630038] *[#8979=0.616139] *[#8980=0.606096] *[#8983=0.606014] *[#8984=0.604065] *[#8985=0.600496] *[#8986=0.599863] *[#8989=0.598259] *[#8992=0.597566] *[#8994=0.596291]  + - costs of the above after a little optimization:
    0 v= 0.652274:  -0.33   3.65  -9.00  -2.42  -1.70  -2.44  [grid]
    1 v= 0.635803:  12.67  -6.29  -8.38  -7.02   7.38  10.89  [grid]
    2 v= 0.759955:  22.52  -8.35  -5.64  -9.41  11.15  23.11  [grid]
    3 v= 0.825500:  24.27  -6.30  -4.91  12.03  10.91  28.98  [grid]
    4 v= 0.656243: -10.78  -8.43  -8.32  -6.45  14.54 -15.57  [grid]
    5 v= 0.804057: -24.59  -7.18  -4.56   1.21  11.93 -33.81  [grid]
    6 v= 0.768989:  25.23  -6.19  -4.60  -9.11   8.99  27.91  [rand]
    7 v= 0.700120: -13.80 -10.45  -5.78   3.13  12.30 -19.30  [grid]
    8 v= 0.668093:  14.48  -3.47 -10.02   4.93   7.43  14.77  [grid]
    9 v= 0.745369:  11.79 -12.80  -5.66   9.35  17.45  12.60  [grid]
   10 v= 0.700675: -15.60  -5.14  -8.14   5.99   9.28 -21.67  [rand]
   11 v= 0.858911:  27.97  -5.30  -1.59  11.85   8.69  35.26  [rand]
   12 v= 0.659399:  -8.08  -9.50  -6.94   6.63  11.38 -14.27  [grid]
   13 v= 0.871260: -22.65  -7.04  -1.68 -24.63  10.00 -33.24  [grid]
   14 v= 0.796876:  13.18 -13.88  -5.14  -7.97  21.06  15.10  [grid]
   15 v= 0.846749:  23.33 -12.23  -1.50   8.91  17.37  29.71  [rand]
   16 v= 0.813619:  22.06   6.49  -4.08  -4.34  -5.47  26.88  [rand]
   17 v= 0.796272:  22.40 -11.75  -3.45   2.44  17.26  26.81  [rand]
   18 v= 0.863529: -18.32 -16.14  -2.50  -5.85  22.95 -28.24  [rand]
   19 v= 0.630038: -11.41  -5.77  -8.90  -4.46  10.35 -15.51  [grid]
   20 v= 0.766771:  22.48   3.30  -5.19   6.34  -2.72  24.34  [rand]
   21 v= 0.840238: -18.51 -12.83  -4.51   3.53  22.93 -26.23  [rand]
   22 v= 0.812370: -24.68  -6.77  -3.10   4.46   7.52 -34.69  [grid]
  *23 v= 0.596291:  -4.67  -7.41  -8.81  -6.33  10.98  -5.77  [grid]
   24 v= 0.779824:  24.35  -6.39  -4.99  -8.03  12.17  27.55  [grid]
   25 v= 0.702619: -11.07 -11.02  -6.79   8.34  12.02 -17.63  [grid]
   26 v= 0.800360:  21.34 -13.21  -3.18   5.31  18.55  25.27  [rand]
   27 v= 0.778430: -20.99  -7.98  -5.36  -6.76  12.86 -30.19  [rand]
   28 v= 0.703735:  10.80 -10.08  -7.71  11.11  14.03  10.89  [grid]
   29 v= 0.767441: -23.26  -1.76  -4.35 -11.68   6.05 -31.37  [rand]
   30 v= 0.624232:  -5.12   4.11  -9.17  -7.29   0.93  -5.91  [grid]
   31 v= 0.653709: -10.51  -8.97  -8.15  -6.58  14.62 -14.51  [grid]
   32 v= 0.809835: -23.24  -9.84  -2.27  -4.84  13.99 -35.26  [rand]
   33 v= 0.649808:  14.30   0.20 -10.37   4.70   3.45  14.05  [grid]
   34 v= 0.633916:  11.10  -7.77  -8.05  -8.81  11.17   9.98  [grid]
   35 v= 0.619883:   9.14  -5.43  -8.21  -9.65   8.79   8.02  [grid]
   36 v= 0.708525: -14.79  -4.21  -8.60 -12.02   8.79 -22.38  [rand]
   37 v= 0.810812: -13.12 -16.77  -4.42  -0.05  23.37 -22.41  [grid]
   38 v= 0.631058:  -6.24  -7.45  -9.26  -7.39   9.04 -11.08  [grid]
   39 v= 0.808338: -24.86  -5.40  -3.32   6.12   8.19 -35.10  [rand]
   40 v= 0.765942: -19.91   4.57  -4.91  -7.91  -3.07 -27.65  [rand]
   41 v= 0.872659:  12.26 -15.78  -3.94  15.60  19.48  15.66  [grid]
   42 v= 0.681582:  12.76  -7.00  -7.78 -12.67   7.84  13.09  [grid]
   43 v= 0.790098: -12.87 -13.81  -5.14 -13.51  19.16 -21.64  [grid]
   44 v= 0.663340: -11.59  -8.04  -8.21  -5.30  14.77 -16.11  [grid]
 + - save #23 for twobest
 + - save #35 for twobest
 + - save #30 for twobest
 + - save #19 for twobest
 + - save #38 for twobest
 + - skip #34 for twobest: too close to set #35
 + - skip # 1 for twobest: too close to set #35
 + - save #33 for twobest
 + - save # 0 for twobest
 + - skip #31 for twobest: too close to set #19
 + - skip # 4 for twobest: too close to set #19
 + - save #12 for twobest
 + - skip #44 for twobest: too close to set #19
 + - skip # 8 for twobest: too close to set #33
 + - skip #42 for twobest: too close to set #34
 + - save # 7 for twobest
 + - save #10 for twobest
 + - skip #25 for twobest: too close to set #12
 + - save #28 for twobest
 + - save #36 for twobest
 + - skip # 9 for twobest: too close to set #28
 + - save # 2 for twobest
 + - save #40 for twobest
 + - save #20 for twobest
 + - save #29 for twobest
 + - save # 6 for twobest
 + - save #27 for twobest
 + - skip #24 for twobest: too close to set # 2
 + - save #43 for twobest
 + - save #17 for twobest
 + - save #14 for twobest
 + - skip #26 for twobest: too close to set #17
 + - save # 5 for twobest
 + - Coarse startup search net CPU time = 0.0 s
++ Start refinement #1 on 12 coarse parameter sets
 + * Enter alignment setup routine
 + - Smoothing base; radius=3.89
 + - Smoothing source; radius=3.89
 + !source mask fill: ubot=22 usiz=35.5
 + - retaining old weight image
 + - using 23748 points from base image [use_all=2]
 + * Exit alignment setup routine
 +  - histogram: source clip 24.4645 .. 94.3302; base clip 183.924 .. 794.736
 +  - versus source range 2.31758 .. 93.1041; base range 0 .. 857.517
 + 20773 total points stored in 195 'RHDD(14.7439)' bloks
*[#10022=0.576685] *[#10023=0.560666] *[#10024=0.555888] *[#10025=0.552922] *[#10027=0.535643] *[#10030=0.533976] *[#10031=0.523059] *[#10032=0.511008] *[#10033=0.498942] *[#10034=0.497438] *[#10037=0.494464] *[#10039=0.477816] *[#10040=0.474046] *[#10051=0.464571] *[#10058=0.46439] *[#10059=0.46131] *[#10060=0.459843] *[#10061=0.457193] *[#10062=0.45557] *[#10063=0.454332] *[#10066=0.451011] *[#10067=0.448142] *[#10068=0.447366] *[#10069=0.446219] *[#10070=0.445803] *[#10071=0.445025] *[#10073=0.443529] *[#10074=0.441795] *[#10075=0.440711] *[#10076=0.440537] *[#10078=0.439902] *[#10079=0.439594] *[#10082=0.437481] *[#10083=0.436761] *[#10084=0.436303] *[#10085=0.435713] *[#10086=0.435497] *[#10088=0.433385] *[#10089=0.432831] *[#10090=0.432552] *[#10092=0.431966] *[#10097=0.429685] *[#10098=0.426337] *[#10099=0.421362] *[#10100=0.414397] *[#10103=0.405841] 
 + - param set #1 has cost=0.405841
 + -- Parameters = -1.4514 -5.4830 -4.7684 -4.0073 5.5721 -4.6699 0.9350 0.9596 1.0025 -0.0161 0.0562 -0.0320
*[#10201=0.404775] *[#10203=0.400887] 
 + - param set #2 has cost=0.400887
 + -- Parameters = 6.1974 -3.7804 -4.2106 -3.7232 4.2180 2.4460 0.9300 0.9832 0.9972 -0.0407 -0.0451 -0.0373
 + - param set #3 has cost=0.413070
 + -- Parameters = -0.2957 2.5937 -4.6281 -1.6979 -0.5910 -3.3043 0.9485 0.9651 1.0109 0.0053 0.0204 0.0077
 + - param set #4 has cost=0.477411
 + -- Parameters = -10.5494 -6.0436 -7.2084 -4.5309 9.3339 -15.2312 0.8841 0.9672 1.0162 -0.0509 0.0346 -0.0577
 + - param set #5 has cost=0.449236
 + -- Parameters = -0.7053 -6.5390 -5.2269 -7.7114 10.5116 -2.8512 0.9340 0.9698 0.9928 -0.0108 0.0055 -0.0150
 + - param set #6 has cost=0.520650
 + -- Parameters = 13.3692 2.6993 -9.0906 2.4055 3.0574 12.5278 0.9825 0.9545 0.9810 -0.0015 0.0138 -0.0168
*[#10662=0.398046] *[#10663=0.393901] *[#10666=0.392673] *[#10667=0.392088] *[#10669=0.389201] *[#10670=0.386794] *[#10671=0.384525] *[#10676=0.383895] *[#10677=0.382658] *[#10682=0.381839] *[#10685=0.38073] *[#10686=0.380295] *[#10687=0.379164] *[#10688=0.378143] *[#10689=0.377582] *[#10690=0.377393] *[#10693=0.376066] *[#10694=0.374277] *[#10695=0.372126] *[#10698=0.370781] *[#10702=0.369494] *[#10703=0.367779] 
 + - param set #7 has cost=0.367779
 + -- Parameters = 1.5782 0.7499 -2.8315 -3.3071 0.5020 -1.5679 0.9517 0.9862 0.9831 -0.0243 0.0102 -0.0000
 + - param set #8 has cost=0.495670
 + -- Parameters = -5.7252 -1.4235 -5.8168 -9.0837 7.0069 -7.4655 0.9636 0.9811 0.9760 -0.0148 -0.0000 0.0054
 + - param set #9 has cost=0.470636
 + -- Parameters = -11.1736 -6.3684 -1.2046 -7.9865 13.8722 -14.4231 0.8885 1.0283 0.9348 -0.0367 0.0625 0.0342
 + - param set #10 has cost=0.518257
 + -- Parameters = -11.3111 -7.3894 -7.7970 -0.3712 10.6464 -17.2245 0.9492 0.9954 0.9915 0.0176 -0.0025 0.0211
 + - param set #11 has cost=0.505560
 + -- Parameters = 8.6493 -10.7671 -1.5042 6.0380 18.1558 14.5853 0.9160 0.9581 0.9578 0.0668 0.0175 -0.0215
 + - param set #12 has cost=0.427136
 + -- Parameters = 0.9736 0.7347 -5.8270 -0.5403 1.5713 -2.4466 0.9421 0.9069 1.0234 0.0258 0.0107 0.0120
 + - sorting parameter sets by cost
 + -- scanning for distances from #1
 + --- dist(#2,#1) = 0.249 
 + --- dist(#3,#1) = 0.207 
 + --- dist(#4,#1) = 0.133 
 + --- dist(#5,#1) = 0.225 
 + --- dist(#6,#1) = 0.111 
 + --- dist(#7,#1) = 0.235 
 + --- dist(#8,#1) = 0.259 
 + --- dist(#9,#1) = 0.0913 
 + --- dist(#10,#1) = 0.41 
 + --- dist(#11,#1) = 0.189 
 + --- dist(#12,#1) = 0.157 
++ Start refinement #2 on 12 coarse parameter sets
 + * Enter alignment setup routine
 + - Smoothing base; radius=3.02
 + - Smoothing source; radius=3.02
 + !source mask fill: ubot=22 usiz=35.5
 + - retaining old weight image
 + - using 23748 points from base image [use_all=2]
 + * Exit alignment setup routine
 +  - histogram: source clip 24.6493 .. 95.2545; base clip 185.284 .. 800.611
 +  - versus source range 0.680494 .. 93.0954; base range 0 .. 864.009
 + 20705 total points stored in 200 'RHDD(14.5398)' bloks
*[#11205=0.363803] *[#11225=0.360208] *[#11229=0.358665] *[#11230=0.357443] *[#11231=0.356761] *[#11232=0.35661] *[#11233=0.356044] *[#11234=0.354728] *[#11235=0.352717] *[#11236=0.352023] *[#11238=0.351846] *[#11239=0.350398] *[#11240=0.349466] *[#11243=0.349334] *[#11244=0.349272] *[#11249=0.349109] *[#11252=0.348706] *[#11253=0.348417] *[#11254=0.348405] *[#11255=0.348255] *[#11259=0.348178] *[#11261=0.347739] *[#11262=0.347406] *[#11263=0.347233] *[#11264=0.347042] *[#11265=0.347008] *[#11269=0.346514] *[#11272=0.346409] *[#11274=0.346323] *[#11275=0.34615] *[#11280=0.34615] *[#11284=0.345973] *[#11285=0.345968] *[#11287=0.345938] 
 + - param set #1 has cost=0.345938
 + -- Parameters = 1.6194 0.4557 -1.8912 -2.4624 0.7645 -1.6325 0.9620 0.9885 0.9636 -0.0251 0.0027 -0.0097
 + - param set #2 has cost=0.364752
 + -- Parameters = 3.2115 -0.3657 -4.2709 -2.0625 1.3898 -0.0089 0.9592 0.9720 0.9935 -0.0221 -0.0428 -0.0209
 + - param set #3 has cost=0.382937
 + -- Parameters = -1.5002 -3.7116 -5.1287 -3.0387 3.7968 -4.7370 0.9536 0.9679 1.0035 -0.0231 0.0639 -0.0069
 + - param set #4 has cost=0.363204
 + -- Parameters = -0.1541 0.5364 -3.5399 -1.0428 0.6070 -3.5657 0.9597 0.9674 0.9897 0.0063 0.0416 -0.0035
 + - param set #5 has cost=0.355817
 + -- Parameters = 1.8054 -0.7451 -4.0665 -0.8047 1.6753 -1.4707 0.9686 0.9672 0.9924 0.0148 0.0024 0.0021
 + - param set #6 has cost=0.360758
 + -- Parameters = 0.2076 0.9751 -2.7787 -2.3905 0.6490 -2.8697 0.9406 0.9899 0.9834 -0.0204 0.0226 -0.0042
 + - param set #7 has cost=0.460940
 + -- Parameters = -10.4570 -6.3484 -1.3553 -7.3530 13.3425 -13.9853 0.8902 1.0312 0.9365 -0.0368 0.0703 0.0332
 + - param set #8 has cost=0.460475
 + -- Parameters = -9.7263 -3.7433 -6.9354 -3.8600 9.9473 -14.3726 0.8843 0.9662 1.0156 -0.0493 0.0373 -0.0576
 + - param set #9 has cost=0.445321
 + -- Parameters = -5.9695 -1.2399 -5.5918 -10.6548 7.0343 -6.8802 0.9221 0.9621 0.9904 -0.0687 0.0536 -0.0377
 + - param set #10 has cost=0.511260
 + -- Parameters = 8.5950 -10.9086 -1.1335 5.9073 17.9918 14.6127 0.9156 0.9531 0.9531 0.0668 0.0178 -0.0214
 + - param set #11 has cost=0.463566
 + -- Parameters = -9.9977 -5.8971 -2.8222 -3.0336 10.6427 -14.1438 0.9284 0.9880 0.9652 0.0057 0.0257 -0.0003
 + - param set #12 has cost=0.519518
 + -- Parameters = 12.9497 2.0009 -8.2993 1.8934 3.7610 12.6011 0.9827 0.9540 0.9846 0.0079 0.0138 -0.0169
 + - sorting parameter sets by cost
 + -- scanning for distances from #1
 + --- dist(#2,#1) = 0.18 
 + --- dist(#3,#1) = 0.0893 
 + --- dist(#4,#1) = 0.175 
 + --- dist(#5,#1) = 0.205 
 + --- dist(#6,#1) = 0.276 
 + --- dist(#7,#1) = 0.229 
 + --- dist(#8,#1) = 0.215 
 + --- dist(#9,#1) = 0.304 
 + --- dist(#10,#1) = 0.145 
 + --- dist(#11,#1) = 0.414 
 + --- dist(#12,#1) = 0.158 
++ Start refinement #3 on 12 coarse parameter sets
 + * Enter alignment setup routine
 + - Smoothing base; radius=2.35
 + - Smoothing source; radius=2.35
 + !source mask fill: ubot=22 usiz=35.5
 + - retaining old weight image
 + - using 23748 points from base image [use_all=2]
 + * Exit alignment setup routine
 +  - histogram: source clip 24.6522 .. 95.7429; base clip 186.519 .. 805.948
 +  - versus source range 0.139406 .. 93.112; base range 0 .. 869.567
 + 20485 total points stored in 203 'RHDD(14.415)' bloks
*[#12271=0.33082] *[#12281=0.330734] *[#12282=0.330674] *[#12295=0.330618] *[#12296=0.330297] *[#12297=0.329418] *[#12298=0.329175] *[#12299=0.328889] *[#12301=0.328763] *[#12302=0.328515] *[#12305=0.328187] *[#12312=0.328135] *[#12313=0.328126] *[#12314=0.328072] *[#12315=0.327941] *[#12325=0.327892] *[#12328=0.327858] *[#12329=0.327817] *[#12330=0.327809] *[#12332=0.327731] *[#12344=0.327711] *[#12345=0.32768] *[#12348=0.327637] *[#12357=0.327506] *[#12360=0.32745] *[#12362=0.327245] 
 + - param set #1 has cost=0.327245
 + -- Parameters = 1.1937 0.6136 -1.8191 -2.2093 0.7348 -1.7782 0.9658 0.9874 0.9624 -0.0240 0.0065 -0.0086
 + - param set #2 has cost=0.336808
 + -- Parameters = 1.8855 -0.7875 -3.8403 -0.8248 1.6703 -1.4968 0.9698 0.9706 0.9881 0.0116 -0.0017 -0.0026
 + - param set #3 has cost=0.332261
 + -- Parameters = 0.5402 0.6601 -2.6359 -2.2033 0.7384 -2.4377 0.9610 0.9818 0.9747 -0.0228 0.0177 -0.0048
 + - param set #4 has cost=0.336558
 + -- Parameters = 0.1872 0.2588 -3.3398 -1.5515 0.7762 -2.9835 0.9643 0.9797 0.9822 0.0084 0.0407 -0.0090
 + - param set #5 has cost=0.339633
 + -- Parameters = 3.4161 -0.1052 -3.8320 -1.6533 1.0856 0.0361 0.9648 0.9766 0.9867 -0.0205 -0.0349 -0.0174
 + - param set #6 has cost=0.359936
 + -- Parameters = -0.9750 -2.0754 -4.6101 -2.1128 2.8067 -4.0775 0.9657 0.9646 0.9990 -0.0247 0.0600 -0.0002
 + - param set #7 has cost=0.437265
 + -- Parameters = -5.9414 -0.0325 -5.3410 -9.9550 6.1138 -6.8375 0.9118 0.9659 0.9939 -0.0692 0.0552 -0.0373
 + - param set #8 has cost=0.449610
 + -- Parameters = -8.4286 -3.4329 -6.4770 -4.0299 9.2848 -13.0035 0.8953 0.9394 1.0196 -0.0373 0.0473 -0.0632
 + - param set #9 has cost=0.464251
 + -- Parameters = -10.4316 -6.2292 -1.2815 -7.3770 11.5613 -13.5698 0.8917 1.0296 0.9350 -0.0361 0.0711 0.0322
 + - param set #10 has cost=0.458306
 + -- Parameters = -9.8825 -6.2238 -2.9243 -2.9239 10.4894 -14.3145 0.9283 0.9875 0.9661 0.0056 0.0301 -0.0005
 + - param set #11 has cost=0.507883
 + -- Parameters = 8.5586 -10.7738 -0.6567 6.2281 17.6983 13.8612 0.9163 0.9503 0.9526 0.0632 0.0184 -0.0207
 + - param set #12 has cost=0.496191
 + -- Parameters = 9.1649 2.8120 -2.8593 2.8547 5.0924 5.1159 0.9807 0.9611 0.9410 -0.0046 0.0111 -0.0314
 + - sorting parameter sets by cost
 + -- scanning for distances from #1
 + --- dist(#2,#1) = 0.0503 
 + --- dist(#3,#1) = 0.154 
 + --- dist(#4,#1) = 0.16 
 + --- dist(#5,#1) = 0.186 
 + --- dist(#6,#1) = 0.241 
 + --- dist(#7,#1) = 0.219 
 + --- dist(#8,#1) = 0.245 
 + --- dist(#9,#1) = 0.139 
 + --- dist(#10,#1) = 0.291 
 + --- dist(#11,#1) = 0.102 
 + --- dist(#12,#1) = 0.392 
 + - Total coarse refinement net CPU time = 0.0 s; 3322 funcs
++ *** Fine pass begins ***
 + * Enter alignment setup routine
 + - Smoothing base; radius=1.00
 + - Smoothing source; radius=1.00
 + !source mask fill: ubot=22 usiz=35.5
 + - retaining old weight image
 + * Exit alignment setup routine
++ Picking best parameter set out of 13 cases
 +  - histogram: source clip 24.639 .. 96.7831; base clip 186.519 .. 805.948
 +  - versus source range 3.98347e-06 .. 93.1432; base range 0 .. 872.32
 + 20724 total points stored in 211 'RHDD(14.2739)' bloks
 + - cost(#1)=0.361419 *
 + -- Parameters = 1.1937 0.6136 -1.8191 -2.2093 0.7348 -1.7782 0.9658 0.9874 0.9624 -0.0240 0.0065 -0.0086
 + - cost(#2)=0.366116  
 + -- Parameters = 0.5402 0.6601 -2.6359 -2.2033 0.7384 -2.4377 0.9610 0.9818 0.9747 -0.0228 0.0177 -0.0048
 + - cost(#3)=0.368228  
 + -- Parameters = 0.1872 0.2588 -3.3398 -1.5515 0.7762 -2.9835 0.9643 0.9797 0.9822 0.0084 0.0407 -0.0090
 + - cost(#4)=0.369729  
 + -- Parameters = 1.8855 -0.7875 -3.8403 -0.8248 1.6703 -1.4968 0.9698 0.9706 0.9881 0.0116 -0.0017 -0.0026
 + - cost(#5)=0.371049  
 + -- Parameters = 3.4161 -0.1052 -3.8320 -1.6533 1.0856 0.0361 0.9648 0.9766 0.9867 -0.0205 -0.0349 -0.0174
 + - cost(#6)=0.389211  
 + -- Parameters = -0.9750 -2.0754 -4.6101 -2.1128 2.8067 -4.0775 0.9657 0.9646 0.9990 -0.0247 0.0600 -0.0002
 + - cost(#7)=0.460075  
 + -- Parameters = -5.9414 -0.0325 -5.3410 -9.9550 6.1138 -6.8375 0.9118 0.9659 0.9939 -0.0692 0.0552 -0.0373
 + - cost(#8)=0.470800  
 + -- Parameters = -8.4286 -3.4329 -6.4770 -4.0299 9.2848 -13.0035 0.8953 0.9394 1.0196 -0.0373 0.0473 -0.0632
 + - cost(#9)=0.478177  
 + -- Parameters = -9.8825 -6.2238 -2.9243 -2.9239 10.4894 -14.3145 0.9283 0.9875 0.9661 0.0056 0.0301 -0.0005
 + - cost(#10)=0.478286  
 + -- Parameters = -10.4316 -6.2292 -1.2815 -7.3770 11.5613 -13.5698 0.8917 1.0296 0.9350 -0.0361 0.0711 0.0322
 + - cost(#11)=0.507752  
 + -- Parameters = 9.1649 2.8120 -2.8593 2.8547 5.0924 5.1159 0.9807 0.9611 0.9410 -0.0046 0.0111 -0.0314
 + - cost(#12)=0.518704  
 + -- Parameters = 8.5586 -10.7738 -0.6567 6.2281 17.6983 13.8612 0.9163 0.9503 0.9526 0.0632 0.0184 -0.0207
 + - cost(#13)=0.751513  
 + -- Parameters = 0.6425 6.2301 -15.1129 0.0000 0.0000 0.0000 1.0000 1.0000 1.0000 0.0000 0.0000 0.0000
 + -num_rtb 99 ==> refine all 13 cases
 + - cost(#1)=0.359483 *
 + -- Parameters = 1.2961 0.6188 -1.7184 -2.0425 0.6952 -1.8495 0.9661 0.9863 0.9610 -0.0235 0.0061 -0.0039
 + - cost(#2)=0.364167  
 + -- Parameters = 0.4798 0.4906 -2.5377 -1.9967 0.6828 -2.3675 0.9635 0.9814 0.9742 -0.0201 0.0188 -0.0083
 + - cost(#3)=0.364640  
 + -- Parameters = 0.2893 0.0982 -2.8410 -1.6864 0.8395 -2.7694 0.9661 0.9789 0.9764 0.0029 0.0401 -0.0082
 + - cost(#4)=0.367366  
 + -- Parameters = 1.9676 -0.8695 -3.7049 -1.0272 1.5699 -1.4118 0.9697 0.9720 0.9870 0.0075 -0.0011 -0.0017
 + - cost(#5)=0.370129  
 + -- Parameters = 3.4095 -0.1096 -3.8309 -1.5324 1.0840 0.1094 0.9652 0.9762 0.9866 -0.0159 -0.0345 -0.0174
 + - cost(#6)=0.380546  
 + -- Parameters = -0.9944 -1.8951 -4.3064 -1.8358 2.4988 -3.7261 0.9677 0.9689 0.9945 -0.0164 0.0353 0.0044
 + - cost(#7)=0.457082  
 + -- Parameters = -5.4665 0.5868 -5.3084 -10.7281 6.1631 -6.8643 0.9092 0.9663 0.9935 -0.0701 0.0579 -0.0394
 + - cost(#8)=0.462433  
 + -- Parameters = -8.4414 -1.9457 -6.0534 -3.5824 9.8166 -11.4420 0.8967 0.9399 1.0212 -0.0364 0.0483 -0.0652
 + - cost(#9)=0.476090  
 + -- Parameters = -9.2598 -6.6577 -3.1416 -3.0162 10.9981 -14.5620 0.9317 0.9871 0.9671 0.0053 0.0296 -0.0013
 + - cost(#10)=0.470413  
 + -- Parameters = -9.2622 -5.0037 -0.8053 -8.9558 10.2286 -11.4641 0.8928 1.0168 0.9339 -0.0467 0.0855 0.0315
 + - cost(#11)=0.497039  
 + -- Parameters = 8.0378 3.3853 -1.8360 4.1372 5.1553 4.0982 0.9715 0.9612 0.9400 -0.0021 0.0076 -0.0347
 + - cost(#12)=0.514585  
 + -- Parameters = 8.3328 -10.8222 -0.6595 6.3408 17.9393 12.0306 0.9167 0.9502 0.9546 0.0629 0.0183 -0.0210
 + - cost(#13)=0.498852  
 + -- Parameters = -2.9729 6.6551 -5.6377 -2.5820 -4.2992 -5.7010 0.9295 0.9397 1.0355 0.0176 0.0013 0.0290
 + - case #1 is now the best
 + - Initial  cost = 0.359483
 + - Initial fine Parameters = 1.2961 0.6188 -1.7184 -2.0425 0.6952 -1.8495 0.9661 0.9863 0.9610 -0.0235 0.0061 -0.0039
 + - Finalish cost = 0.358488 ; 102 funcs
 +  - Set lpc+ parameters back to pure lpc before Final
 +  - histogram: source clip 24.6236 .. 96.6744; base clip 186.519 .. 805.948
 +  - versus source range 3.98347e-06 .. 93.1432; base range 0 .. 872.32
*[#14706=-0.219774] *[#14713=-0.223931] *[#14737=-0.225608] *[#14753=-0.226302] *[#14758=-0.226655] *[#14762=-0.227196] *[#14763=-0.227354] *[#14767=-0.227412] *[#14768=-0.227576] *[#14775=-0.227591] *[#14779=-0.227684] *[#14781=-0.227719] *[#14789=-0.227882] *[#14793=-0.228007] *[#14794=-0.228049] *[#14797=-0.228307] *[#14798=-0.22845] *[#14801=-0.228483] *[#14807=-0.228617] *[#14812=-0.228658] *[#14819=-0.228854] *[#14822=-0.228994] *[#14823=-0.229018] *[#14826=-0.229172] *[#14829=-0.229173] *[#14831=-0.229353] *[#14834=-0.229466] *[#14843=-0.229594] *[#14846=-0.229651] *[#14849=-0.229663] *[#14851=-0.229908] *[#14854=-0.229974] *[#14863=-0.229993] *[#14867=-0.230042] *[#14868=-0.230055] *[#14872=-0.230063] *[#14874=-0.23016] *[#14877=-0.230269] *[#14892=-0.230292] *[#14905=-0.230419] *[#14914=-0.230572] *[#14921=-0.230596] *[#14925=-0.230661] *[#14928=-0.23076] *[#14929=-0.230775] *[#14943=-0.230799] *[#14949=-0.23084] *[#14958=-0.230992] *[#14961=-0.231006] *[#14967=-0.231078] *[#14971=-0.231116] *[#14973=-0.231227] *[#14976=-0.231242] *[#14979=-0.231317] *[#14984=-0.231339] *[#15012=-0.231371] *[#15021=-0.231373] *[#15022=-0.231416] *[#15023=-0.231455] *[#15025=-0.231465] *[#15026=-0.231466] *[#15029=-0.231471] *[#15032=-0.231485] *[#15033=-0.231491] *[#15035=-0.231497] *[#15040=-0.23151] *[#15041=-0.231512] *[#15042=-0.231524] *[#15047=-0.23153] *[#15050=-0.231533] *[#15053=-0.231535] *[#15057=-0.231547] *[#15058=-0.231551] *[#15063=-0.231554] *[#15068=-0.23156] *[#15071=-0.23157] *[#15072=-0.231578] *[#15073=-0.231584] *[#15076=-0.231589] *[#15078=-0.231607] *[#15081=-0.231611] *[#15082=-0.23162] *[#15083=-0.231625] *[#15084=-0.231628] *[#15093=-0.231632] *[#15094=-0.231633] *[#15097=-0.231634] *[#15100=-0.231636] *[#15103=-0.231644] *[#15106=-0.231654] *[#15107=-0.231656] *[#15109=-0.231658] *[#15110=-0.23166] *[#15115=-0.231668] *[#15116=-0.231688] *[#15117=-0.2317] *[#15118=-0.23171] *[#15119=-0.231715] *[#15120=-0.231725] *[#15121=-0.231743] *[#15122=-0.231743] *[#15126=-0.231743] *[#15127=-0.231747] *[#15130=-0.231814] *[#15131=-0.231823] *[#15134=-0.231831] *[#15137=-0.23184] *[#15138=-0.231844] *[#15139=-0.23185] *[#15140=-0.231855] *[#15141=-0.231866] *[#15146=-0.231869] *[#15147=-0.231871] *[#15148=-0.231879] *[#15149=-0.231886] *[#15156=-0.231886] *[#15158=-0.231892] *[#15159=-0.231896] *[#15160=-0.231903] *[#15163=-0.231907] *[#15164=-0.231913] *[#15165=-0.23192] *[#15170=-0.231924] *[#15175=-0.231926] *[#15177=-0.231929] *[#15180=-0.231937] *[#15183=-0.231942] *[#15184=-0.231953] *[#15187=-0.231957] *[#15188=-0.231957] *[#15190=-0.231975] *[#15193=-0.231977] *[#15199=-0.231979] *[#15201=-0.231981] *[#15202=-0.231982] *[#15204=-0.231987] *[#15207=-0.231991] *[#15208=-0.231992] *[#15209=-0.231998] *[#15210=-0.232006] *[#15211=-0.232015] *[#15214=-0.232019] *[#15215=-0.232019] *[#15222=-0.232021] *[#15227=-0.232022] *[#15228=-0.232024] *[#15233=-0.232026] *[#15235=-0.232029] *[#15242=-0.23203] *[#15243=-0.232031] *[#15266=-0.232031] *[#15278=-0.232032] *[#15288=-0.232034] *[#15303=-0.232035] *[#15313=-0.232035] *[#15324=-0.232037] *[#15325=-0.232039] *[#15326=-0.23204] *[#15327=-0.232046] *[#15330=-0.232058] *[#15331=-0.23207] *[#15334=-0.232086] *[#15337=-0.232088] *[#15340=-0.23209] *[#15343=-0.232096] *[#15346=-0.232096] *[#15348=-0.232103] *[#15353=-0.232105] *[#15359=-0.232105] *[#15361=-0.232107] *[#15370=-0.232107] *[#15372=-0.23211] *[#15373=-0.232114] *[#15375=-0.232114] *[#15378=-0.232116] *[#15384=-0.232119] *[#15399=-0.232122] *[#15400=-0.232122] *[#15404=-0.232124] *[#15415=-0.232126] *[#15418=-0.232132] *[#15419=-0.232132] *[#15421=-0.232136] *[#15422=-0.232137] *[#15423=-0.232138] *[#15428=-0.232143] *[#15431=-0.232146] *[#15432=-0.232147] *[#15433=-0.232149] *[#15434=-0.23215] *[#15443=-0.23215] *[#15444=-0.232151] *[#15447=-0.232151] *[#15452=-0.232152] *[#15453=-0.232153] *[#15454=-0.232154] *[#15460=-0.232155] *[#15477=-0.232156] *[#15478=-0.232156] *[#15481=-0.232157] *[#15486=-0.232158] *[#15487=-0.232159] *[#15488=-0.23216] *[#15491=-0.232161] *[#15492=-0.232161] *[#15499=-0.232164] *[#15510=-0.232165] *[#15523=-0.232165] *[#15524=-0.232166] *[#15538=-0.232167] *[#15540=-0.232167] *[#15546=-0.232167] *[#15550=-0.232168] *[#15560=-0.232168] *[#15574=-0.232169] *[#15575=-0.232169] 
 + - Final    cost = -0.232169 ; 876 funcs
 + Final fine fit Parameters:
       x-shift= 1.6736   y-shift= 1.0703   z-shift=-0.6977
       z-angle=-1.2887   x-angle= 0.2544   y-angle=-1.3606
       x-scale= 0.9814   y-scale= 0.9963   z-scale= 0.9468
     y/x-shear=-0.0028 z/x-shear=-0.0038 z/y-shear=-0.0096
 + - Fine net CPU time = 0.0 s
++ Computing output image
++ image warp: parameters = 1.6736 1.0703 -0.6977 -1.2887 0.2544 -1.3606 0.9814 0.9963 0.9468 -0.0028 -0.0038 -0.0096
++ Output dataset ./__tt_sub-ADS1021_SurfVol_ns_ob_temp_al_junk+orig.BRIK
++ Wrote -1Dmatrix_save ./sub-ADS1021_SurfVol_al_junk_e2a_only_mat.aff12.1D
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 50.5
++ ###########################################################
++ #   Please check results visually for alignment quality   #
++ ###########################################################
++ #   '-autoweight' is recommended when using -lpc or -lpa  #
++ #   If your results are not good, please try again.       #
++ ###########################################################
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./__tt_vr_base_min_outlier_ts_ns+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./__tt_vr_base_min_outlier_ts_ns+orig.BRIK is 4.785283 degrees from plumb.
++ Source dataset: ./__tt_sub-ADS1021_SurfVol_ns+orig.HEAD
++ Base dataset:   ./__tt_vr_base_min_outlier_ts_ns+orig.HEAD
++ Loading datasets
 + Range param#4 [z-angle] = -6.000000 .. 6.000000
 + Range param#5 [x-angle] = -6.000000 .. 6.000000
 + Range param#6 [y-angle] = -6.000000 .. 6.000000
 + Range param#1 [x-shift] = -10.000000 .. 10.000000
 + Range param#2 [y-shift] = -10.000000 .. 10.000000
 + Range param#3 [z-shift] = -10.000000 .. 10.000000
 + Range param#4 [z-angle] = -45.000000 .. 45.000000
 + Range param#5 [x-angle] = -45.000000 .. 45.000000
 + Range param#6 [y-angle] = -45.000000 .. 45.000000
 + Range param#1 [x-shift] = -40.000000 .. 40.000000
 + Range param#2 [y-shift] = -40.000000 .. 40.000000
 + Range param#3 [z-shift] = -40.000000 .. 40.000000
++ changing output grid spacing to 1.0000 mm
++ OpenMP thread count = 1
++ ========== Applying transformation to 1 sub-bricks ==========
++ ========== sub-brick #0 ========== [total CPU to here=0.0 s]
 + * Enter alignment setup routine
 + - copying base image
 + - copying source image
 + - no weight image
 + - using 11 points from base image [use_all=0]
 + * Exit alignment setup routine
++ using -1Dmatrix_apply
++ Computing output image
++ image warp: parameters = 0.9803 0.0224 0.0381 19.4686 0.0401 0.0688 -0.9431 160.4405 -0.0230 0.9938 0.0732 26.2005
++ Output dataset ./sub-ADS1021_SurfVol_al_junk+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 1.0
++ ###########################################################
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
foreach run ( 01 )
3dvolreg -verbose -zpad 1 -base vr_base_min_outlier+orig -1Dfile dfile.r01.1D -prefix rm.epi.volreg.r01 -Fourier -1Dmatrix_save mat.r01.vr.aff12.1D pb01.sub-ADS1021.r01.despike+orig
++ 3dvolreg: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./vr_base_min_outlier+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./vr_base_min_outlier+orig.BRIK is 4.785283 degrees from plumb.
++ Reading in base dataset ./vr_base_min_outlier+orig.BRIK
++ Oblique dataset:./pb01.sub-ADS1021.r01.despike+orig.BRIK is 4.785283 degrees from plumb.
++ Reading input dataset ./pb01.sub-ADS1021.r01.despike+orig.BRIK
++ Edging: x=3 y=3 z=1
++ Creating mask for -maxdisp
 + Automask has 25795 voxels
 + 4777 voxels left in -maxdisp mask after erosion
++ Initializing alignment base
++ Starting final pass on 505 sub-bricks: 0..1..2..3..4..5..6..7..8..9..10..11..12..13..14..15..16..17..18..19..20..21..22..23..24..25..26..27..28..29..30..31..32..33..34..35..36..37..38..39..40..41..42..43..44..45..46..47..48..49..50..51..52..53..54..55..56..57..58..59..60..61..62..63..64..65..66..67..68..69..70..71..72..73..74..75..76..77..78..79..80..81..82..83..84..85..86..87..88..89..90..91..92..93..94..95..96..97..98..99..100..101..102..103..104..105..106..107..108..109..110..111..112..113..114..115..116..117..118..119..120..121..122..123..124..125..126..127..128..129..130..131..132..133..134..135..136..137..138..139..140..141..142..143..144..145..146..147..148..149..150..151..152..153..154..155..156..157..158..159..160..161..162..163..164..165..166..167..168..169..170..171..172..173..174..175..176..177..178..179..180..181..182..183..184..185..186..187..188..189..190..191..192..193..194..195..196..197..198..199..200..201..202..203..204..205..206..207..208..209..210..211..212..213..214..215..216..217..218..219..220..221..222..223..224..225..226..227..228..229..230..231..232..233..234..235..236..237..238..239..240..241..242..243..244..245..246..247..248..249..250..251..252..253..254..255..256..257..258..259..260..261..262..263..264..265..266..267..268..269..270..271..272..273..274..275..276..277..278..279..280..281..282..283..284..285..286..287..288..289..290..291..292..293..294..295..296..297..298..299..300..301..302..303..304..305..306..307..308..309..310..311..312..313..314..315..316..317..318..319..320..321..322..323..324..325..326..327..328..329..330..331..332..333..334..335..336..337..338..339..340..341..342..343..344..345..346..347..348..349..350..351..352..353..354..355..356..357..358..359..360..361..362..363..364..365..366..367..368..369..370..371..372..373..374..375..376..377..378..379..380..381..382..383..384..385..386..387..388..389..390..391..392..393..394..395..396..397..398..399..400..401..402..403..404..405..406..407..408..409..410..411..412..413..414..415..416..417..418..419..420..421..422..423..424..425..426..427..428..429..430..431..432..433..434..435..436..437..438..439..440..441..442..443..444..445..446..447..448..449..450..451..452..453..454..455..456..457..458..459..460..461..462..463..464..465..466..467..468..469..470..471..472..473..474..475..476..477..478..479..480..481..482..483..484..485..486..487..488..489..490..491..492..493..494..495..496..497..498..499..500..501..502..503..504..
++ CPU time for realignment=0 s  [=0 s/sub-brick]
++ Min : roll=-0.127  pitch=-4.306  yaw=-0.374  dS=-0.000  dL=-0.280  dP=-0.050
++ Mean: roll=+0.034  pitch=-1.765  yaw=-0.115  dS=+1.026  dL=-0.080  dP=+0.578
++ Max : roll=+0.212  pitch=+0.082  yaw=+0.073  dS=+2.176  dL=+0.064  dP=+1.525
++ Max displacements (mm) for each sub-brick:
 0.38(0.00) 0.32(0.07) 0.08(0.27) 0.00(0.08) 0.04(0.04) 0.07(0.03) 0.06(0.03) 0.12(0.06) 0.13(0.03) 0.13(0.02) 0.23(0.12) 0.37(0.14) 0.22(0.18) 0.28(0.07) 0.37(0.10) 0.53(0.16) 0.38(0.17) 0.35(0.04) 0.28(0.09) 0.33(0.05) 0.33(0.05) 0.40(0.06) 0.48(0.08) 0.48(0.06) 0.48(0.05) 0.31(0.19) 0.25(0.07) 0.37(0.15) 0.43(0.12) 0.59(0.17) 0.51(0.12) 0.37(0.15) 0.26(0.12) 0.24(0.03) 0.24(0.02) 0.25(0.01) 0.29(0.05) 0.38(0.10) 0.32(0.10) 0.32(0.03) 0.35(0.04) 0.34(0.02) 0.40(0.07) 0.30(0.13) 0.31(0.04) 0.36(0.10) 0.56(0.21) 0.59(0.39) 0.50(0.22) 0.50(0.20) 0.43(0.10) 0.34(0.10) 0.34(0.03) 0.31(0.06) 0.33(0.06) 0.34(0.03) 0.34(0.03) 0.38(0.04) 0.38(0.01) 0.38(0.00) 0.35(0.04) 0.38(0.05) 0.35(0.12) 0.34(0.07) 0.44(0.12) 0.51(0.08) 0.44(0.09) 0.40(0.05) 0.42(0.06) 0.39(0.04) 0.38(0.02) 0.39(0.01) 0.41(0.03) 0.42(0.02) 0.55(0.14) 0.46(0.10) 0.47(0.03) 0.54(0.12) 0.45(0.12) 0.37(0.11) 0.41(0.07) 0.46(0.07) 0.37(0.12) 0.33(0.09) 0.39(0.12) 0.55(0.18) 0.51(0.07) 0.44(0.08) 0.53(0.10) 0.57(0.06) 0.49(0.10) 0.58(0.10) 0.72(0.14) 0.83(0.12) 0.92(0.12) 1.02(0.11) 1.95(0.94) 1.95(0.03) 1.99(0.05) 2.32(0.34) 2.44(0.12) 2.36(0.09) 2.39(0.04) 2.20(0.20) 2.05(0.16) 1.90(0.15) 1.71(0.20) 1.69(0.05) 1.76(0.07) 1.69(0.08) 1.77(0.08) 1.87(0.11) 1.97(0.13) 1.85(0.12) 1.99(0.15) 2.06(0.07) 1.94(0.13) 2.06(0.12) 2.28(0.22) 2.28(0.03) 2.24(0.05) 2.41(0.18) 2.70(0.29) 3.16(0.47) 2.87(0.29) 2.77(0.13) 2.69(0.09) 2.43(0.27) 2.44(0.05) 2.51(0.07) 2.62(0.12) 2.86(0.26) 3.27(0.42) 3.42(0.18) 3.64(0.22) 3.20(0.44) 2.98(0.24) 2.78(0.20) 2.77(0.06) 2.90(0.13) 3.04(0.18) 3.37(0.35) 3.28(0.09) 3.08(0.20) 3.24(0.17) 3.07(0.17) 3.01(0.09) 3.03(0.05) 3.14(0.11) 3.17(0.09) 3.38(0.22) 3.65(0.29) 3.46(0.19) 3.37(0.12) 3.40(0.07) 3.14(0.27) 3.22(0.10) 3.42(0.21) 3.43(0.08) 3.73(0.31) 4.39(0.66) 4.33(0.15) 4.04(0.29) 3.89(0.15) 4.12(0.23) 4.18(0.07) 4.23(0.06) 4.39(0.16) 4.40(0.08) 4.71(0.32) 5.00(0.28) 5.06(0.07) 5.07(0.11) 5.22(0.15) 5.50(0.28) 5.57(0.28) 5.96(0.39) 6.02(0.07) 6.12(0.36) 6.42(0.30) 6.41(0.10) 6.36(0.20) 6.00(0.38) 5.66(0.34) 5.62(0.16) 5.89(0.28) 5.90(0.07) 6.04(0.15) 6.28(0.23) 6.12(0.18) 6.25(0.15) 6.42(0.17) 6.24(0.18) 6.37(0.13) 6.60(0.23) 6.45(0.16) 6.32(0.14) 5.42(0.92) 5.66(0.27) 5.58(0.19) 5.60(0.10) 6.16(0.56) 6.18(0.10) 6.13(0.07) 6.17(0.06) 6.05(0.12) 5.84(0.22) 5.34(0.50) 4.98(0.36) 4.71(0.28) 4.55(0.16) 4.44(0.12) 4.44(0.03) 4.59(0.15) 4.62(0.07) 5.00(0.38) 5.19(0.19) 5.21(0.09) 5.30(0.10) 5.66(0.36) 5.87(0.22) 6.17(0.32) 6.26(0.12) 6.28(0.16) 6.55(0.28) 6.53(0.27) 6.41(0.16) 6.74(0.57) 6.89(0.17) 6.72(0.17) 6.63(0.09) 6.80(0.17) 6.83(0.05) 6.69(0.15) 6.89(0.21) 6.91(0.03) 6.91(0.34) 7.37(0.47) 7.44(0.07) 7.37(0.09) 7.59(0.22) 7.47(0.26) 7.65(0.19) 7.76(0.21) 7.83(0.20) 7.94(0.20) 7.98(0.09) 7.75(0.36) 8.06(0.32) 8.13(0.08) 7.94(0.20) 8.09(0.15) 8.18(0.10) 7.97(0.23) 8.07(0.11) 8.29(0.23) 8.07(0.23) 8.12(0.06) 8.33(0.21) 8.14(0.19) 8.06(0.08) 8.32(0.26) 8.25(0.08) 8.32(0.07) 8.39(0.08) 8.18(0.21) 8.38(0.20) 8.32(0.07) 8.17(0.15) 8.37(0.20) 8.51(0.16) 8.33(0.20) 8.56(0.24) 8.68(0.14) 8.45(0.25) 8.53(0.09) 8.71(0.20) 8.46(0.26) 8.46(0.06) 8.68(0.22) 8.41(0.28) 8.42(0.06) 8.80(0.38) 8.61(0.20) 8.59(0.05) 8.79(0.21) 8.58(0.22) 8.61(0.06) 8.74(0.13) 8.60(0.15) 8.33(0.27) 7.95(0.39) 7.72(0.23) 7.54(0.19) 7.58(0.13) 7.46(0.20) 7.27(0.20) 7.13(0.16) 6.99(0.15) 6.93(0.07) 6.99(0.07) 7.15(0.17) 7.11(0.05) 6.97(0.15) 6.88(0.09) 6.97(0.09) 7.16(0.21) 7.00(0.18) 6.89(0.11) 6.83(0.06) 6.92(0.11) 6.98(0.07) 6.76(0.23) 6.70(0.07) 6.87(0.17) 6.94(0.08) 6.71(0.24) 6.62(0.10) 6.81(0.19) 6.90(0.11) 6.61(0.31) 6.48(0.13) 6.45(0.03) 6.63(0.19) 6.57(0.07) 6.54(0.03) 6.57(0.03) 6.54(0.04) 6.69(0.16) 6.55(0.15) 6.60(0.06) 6.72(0.12) 6.89(0.17) 6.84(0.06) 7.08(0.24) 7.05(0.22) 6.71(0.36) 6.63(0.17) 6.47(0.17) 6.38(0.13) 6.25(0.14) 5.98(0.26) 5.72(0.28) 5.51(0.22) 5.45(0.13) 5.53(0.08) 5.73(0.21) 5.73(0.06) 5.63(0.11) 5.51(0.12) 5.46(0.06) 5.47(0.03) 5.62(0.16) 5.76(0.13) 5.70(0.07) 5.53(0.17) 5.42(0.12) 5.44(0.06) 5.65(0.22) 5.72(0.07) 5.59(0.15) 5.41(0.18) 5.38(0.08) 5.48(0.11) 5.57(0.08) 5.69(0.13) 5.52(0.18) 5.32(0.20) 5.27(0.07) 5.38(0.12) 5.18(0.20) 4.91(0.28) 3.33(1.64) 2.96(0.37) 2.85(0.12) 2.76(0.16) 2.73(0.04) 2.53(0.23) 2.33(0.20) 2.23(0.11) 2.34(0.13) 2.46(0.12) 2.55(0.11) 2.71(0.17) 2.55(0.16) 2.35(0.21) 2.26(0.09) 2.29(0.07) 2.53(0.24) 2.66(0.13) 2.52(0.15) 2.31(0.21) 2.11(0.21) 2.11(0.05) 2.26(0.15) 2.45(0.19) 2.58(0.14) 2.62(0.08) 2.46(0.16) 2.27(0.19) 2.17(0.11) 2.17(0.05) 2.25(0.08) 2.42(0.17) 2.55(0.14) 2.55(0.02) 2.30(0.26) 2.06(0.24) 2.01(0.07) 2.04(0.05) 2.10(0.06) 1.98(0.16) 2.10(0.14) 2.30(0.21) 2.09(0.22) 1.97(0.13) 2.06(0.10) 2.08(0.04) 2.17(0.09) 2.32(0.16) 2.05(0.30) 1.88(0.17) 2.03(0.16) 1.65(0.41) 1.57(0.11) 1.73(0.17) 1.86(0.14) 1.71(0.17) 1.69(0.05) 1.74(0.07) 1.93(0.19) 1.85(0.08) 1.81(0.06) 1.83(0.03) 1.95(0.15) 1.90(0.07) 1.68(0.23) 1.68(0.06) 1.86(0.20) 1.79(0.08) 1.78(0.04) 1.86(0.11) 1.97(0.10) 1.92(0.06) 1.76(0.17) 1.76(0.03) 1.95(0.20) 2.09(0.17) 2.35(0.26) 2.38(0.07) 2.27(0.11) 2.25(0.07) 2.15(0.10) 2.08(0.10) 2.56(0.49) 2.36(0.20) 2.18(0.18) 2.44(0.26) 2.59(0.17) 2.51(0.11) 2.45(0.06) 2.33(0.13) 2.33(0.04) 2.49(0.17) 2.63(0.15) 2.61(0.04) 2.38(0.25) 2.16(0.23) 2.13(0.04) 2.17(0.07) 2.25(0.08) 2.44(0.20) 2.51(0.07) 2.36(0.15) 2.18(0.20) 2.22(0.19) 2.34(0.13) 2.46(0.12) 2.34(0.13) 2.21(0.14) 2.30(0.11) 2.43(0.15) 2.29(0.14) 2.36(0.08) 2.36(0.04) 2.20(0.17) 2.17(0.04) 2.19(0.05) 2.27(0.08) 2.33(0.06) 2.22(0.13) 2.21(0.02) 2.29(0.10) 2.16(0.14) 2.15(0.04) 2.14(0.14) 2.02(0.14) 2.05(0.04) 2.13(0.08) 2.00(0.14) 2.01(0.04) 2.16(0.16) 2.28(0.12) 2.20(0.10) 1.98(0.24)
++ Max displacement in automask = 8.80 (mm) at sub-brick 282
++ Max delta displ  in automask = 1.64 (mm) at sub-brick 372
++ Wrote dataset to disk in ./rm.epi.volreg.r01+orig.BRIK
3dcalc -overwrite -a pb01.sub-ADS1021.r01.despike+orig -expr 1 -prefix rm.epi.all1
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
[7m*+ WARNING:[0m input 'a' is not used in the expression
++ Output dataset ./rm.epi.all1+orig.BRIK
cat_matvec -ONELINE sub-ADS1021_SurfVol_al_junk_mat.aff12.1D -I mat.r01.vr.aff12.1D
3dAllineate -base sub-ADS1021_SurfVol_ns+orig -input pb01.sub-ADS1021.r01.despike+orig -1Dmatrix_apply mat.r01.warp.aff12.1D -mast_dxyz 3 -prefix rm.epi.nomask.r01
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb01.sub-ADS1021.r01.despike+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb01.sub-ADS1021.r01.despike+orig.BRIK is 4.785283 degrees from plumb.
++ Source dataset: ./pb01.sub-ADS1021.r01.despike+orig.HEAD
++ Base dataset:   ./sub-ADS1021_SurfVol_ns+orig.HEAD
++ Loading datasets
++ master dataset for output = base
++ changing output grid spacing to 3.0000 mm
++ OpenMP thread count = 1
++ ========== Applying transformation to 505 sub-bricks ==========
volume 0..1..2..3..4..5..6..7..8..9..10..11..12..13..14..15..16..17..18..19..20..21..22..23..24..25..26..27..28..29..30..31..32..33..34..35..36..37..38..39..40..41..42..43..44..45..46..47..48..49..50..51..52..53..54..55..56..57..58..59..60..61..62..63..64..65..66..67..68..69..70..71..72..73..74..75..76..77..78..79..80..81..82..83..84..85..86..87..88..89..90..91..92..93..94..95..96..97..98..99..100..101..102..103..104..105..106..107..108..109..110..111..112..113..114..115..116..117..118..119..120..121..122..123..124..125..126..127..128..129..130..131..132..133..134..135..136..137..138..139..140..141..142..143..144..145..146..147..148..149..150..151..152..153..154..155..156..157..158..159..160..161..162..163..164..165..166..167..168..169..170..171..172..173..174..175..176..177..178..179..180..181..182..183..184..185..186..187..188..189..190..191..192..193..194..195..196..197..198..199..200..201..202..203..204..205..206..207..208..209..210..211..212..213..214..215..216..217..218..219..220..221..222..223..224..225..226..227..228..229..230..231..232..233..234..235..236..237..238..239..240..241..242..243..244..245..246..247..248..249..250..251..252..253..254..255..256..257..258..259..260..261..262..263..264..265..266..267..268..269..270..271..272..273..274..275..276..277..278..279..280..281..282..283..284..285..286..287..288..289..290..291..292..293..294..295..296..297..298..299..300..301..302..303..304..305..306..307..308..309..310..311..312..313..314..315..316..317..318..319..320..321..322..323..324..325..326..327..328..329..330..331..332..333..334..335..336..337..338..339..340..341..342..343..344..345..346..347..348..349..350..351..352..353..354..355..356..357..358..359..360..361..362..363..364..365..366..367..368..369..370..371..372..373..374..375..376..377..378..379..380..381..382..383..384..385..386..387..388..389..390..391..392..393..394..395..396..397..398..399..400..401..402..403..404..405..406..407..408..409..410..411..412..413..414..415..416..417..418..419..420..421..422..423..424..425..426..427..428..429..430..431..432..433..434..435..436..437..438..439..440..441..442..443..444..445..446..447..448..449..450..451..452..453..454..455..456..457..458..459..460..461..462..463..464..465..466..467..468..469..470..471..472..473..474..475..476..477..478..479..480..481..482..483..484..485..486..487..488..489..490..491..492..493..494..495..496..497..498..499..500..501..502..503..504
++ Output dataset ./rm.epi.nomask.r01+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 56.9
++ ###########################################################
3dAllineate -base sub-ADS1021_SurfVol_ns+orig -input rm.epi.all1+orig -1Dmatrix_apply mat.r01.warp.aff12.1D -mast_dxyz 3 -final NN -quiet -prefix rm.epi.1.r01
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./rm.epi.all1+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./rm.epi.all1+orig.BRIK is 4.785283 degrees from plumb.
++ Output dataset ./rm.epi.1.r01+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 51.3
3dTstat -min -prefix rm.epi.min.r01 rm.epi.1.r01+orig
++ 3dTstat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: KR Hammett & RW Cox
