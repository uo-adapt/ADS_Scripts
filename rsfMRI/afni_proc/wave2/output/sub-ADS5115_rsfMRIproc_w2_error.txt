echo auto-generated by afni_proc.py, Mon Mar  4 11:55:11 2019
echo (version 6.16, July 5, 2018)
echo execution started: `date`
date
afni -ver
afni_history -check_date 3 May 2018
if ( 0 ) then
if ( 0 > 0 ) then
set subj = sub-ADS5115
endif
set output_dir = sub-ADS5115.results
if ( -d sub-ADS5115.results ) then
set runs = ( `count -digits 2 1 1` )
count -digits 2 1 1
mkdir sub-ADS5115.results
mkdir sub-ADS5115.results/stimuli
3dcopy /projects/adapt_lab/shared/ADS/data/BIDS_data/derivatives/freesurfer/sub-ADS5115_ses-wave2.long.sub-ADS5115/SUMA/sub-ADS5115_SurfVol.nii.gz sub-ADS5115.results/sub-ADS5115_SurfVol
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dcopy /projects/adapt_lab/shared/ADS/data/BIDS_data/derivatives/freesurfer/sub-ADS5115_ses-wave2.long.sub-ADS5115/SUMA/aparc.a2009s+aseg_rank.nii.gz sub-ADS5115.results/copy_af_aaseg
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dcopy /projects/adapt_lab/shared/ADS/data/BIDS_data/derivatives/freesurfer/sub-ADS5115_ses-wave2.long.sub-ADS5115/SUMA/aparc.a2009s+aseg_rank.nii.gz sub-ADS5115.results/copy_af_aeseg
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dcopy /projects/adapt_lab/shared/ADS/data/BIDS_data/derivatives/freesurfer/sub-ADS5115_ses-wave2.long.sub-ADS5115/SUMA/sub-ADS5115_vent.nii.gz sub-ADS5115.results/copy_af_FSvent
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dcopy /projects/adapt_lab/shared/ADS/data/BIDS_data/derivatives/freesurfer/sub-ADS5115_ses-wave2.long.sub-ADS5115/SUMA/sub-ADS5115_WM.nii.gz sub-ADS5115.results/copy_af_FSWe
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dTcat -prefix sub-ADS5115.results/pb00.sub-ADS5115.r01.tcat /projects/adapt_lab/shared/ADS/data/BIDS_data/sub-ADS5115/ses-wave2/func/sub-ADS5115_ses-wave2_task-rest_bold.nii.gz[5..$]
++ 3dTcat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ elapsed time = 1.7 s
set tr_counts = ( 505 )
cd sub-ADS5115.results
touch out.pre_ss_warn.txt
foreach run ( 01 )
3dToutcount -automask -fraction -polort 5 -legendre pb00.sub-ADS5115.r01.tcat+orig
++ 3dToutcount: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-ADS5115.r01.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-ADS5115.r01.tcat+orig.BRIK is 4.700030 degrees from plumb.
++ 22900 voxels passed mask/clip
1deval -a outcount.r01.1D -expr 1-step(a-0.1)
if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
1deval -a outcount.r01.1D{0} -expr step(a-0.4)
end
cat outcount.r01.1D
cat rm.out.cen.r01.1D
set minindex = `3dTstat -argmin -prefix - outcount_rall.1D\'`
3dTstat -argmin -prefix - outcount_rall.1D'
++ 3dTstat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: KR Hammett & RW Cox
[7m*+ WARNING:[0m Input dataset is not 3D+time; assuming TR=1.0
set ovals = ( `1d_tool.py -set_run_lengths $tr_counts                       
                          -index_to_run_tr $minindex` )
1d_tool.py -set_run_lengths 505 -index_to_run_tr 16
set minoutrun = 01
set minouttr = 16
tee out.min_outlier.txt
echo min outlier: run 01, TR 16
foreach run ( 01 )
3dDespike -NEW -nomask -prefix pb01.sub-ADS5115.r01.despike pb00.sub-ADS5115.r01.tcat+orig
++ 3dDespike: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-ADS5115.r01.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-ADS5115.r01.tcat+orig.BRIK is 4.700030 degrees from plumb.
++ Input dataset is in short format, but output will be in float format
++ ignoring first 0 time points, using last 505
++ using 505 time points => -corder 17
++ Loading dataset pb00.sub-ADS5115.r01.tcat+orig
++ processing all 98304 voxels in dataset
++ Procesing time series with NEW model fit algorithm
++ smash edit thresholds: 3.1 .. 5.0 MADs
 +   [ 3.457% .. 0.072% of normal distribution]
 +   [ 8.839% .. 3.125% of Laplace distribution]
++ start OpenMP thread #0
..........................................
++ Elapsed despike time =  10s 586ms

++ FINAL: 48867840 data points, 1808674 edits [3.701%], 113263 big edits [0.232%]
++ Output dataset ./pb01.sub-ADS5115.r01.despike+orig.BRIK
end
3dbucket -prefix vr_base_min_outlier pb01.sub-ADS5115.r01.despike+orig[16]
++ 3dbucket: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
align_epi_anat.py -anat2epi -anat sub-ADS5115_SurfVol+orig -save_skullstrip -suffix _al_junk -epi vr_base_min_outlier+orig -epi_base 0 -epi_strip 3dAutomask -giant_move -cost lpc+ZZ -volreg off -tshift off
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ 3dWarp: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: RW Cox
++ Output dataset ./__tt_sub-ADS5115_SurfVol_ns_ob+orig.BRIK
++ 3dbucket: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ 3dAutomask: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Emperor Zhark
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./__tt_vr_base_min_outlier_ts+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./__tt_vr_base_min_outlier_ts+orig.BRIK is 4.700030 degrees from plumb.
++ Loading dataset ./__tt_vr_base_min_outlier_ts+orig
++ Forming automask
 + Fixed clip level = 278.489410
 + Used gradual clip level = 209.541595 .. 464.969391
 + Number voxels above clip level = 23836
 + Clustering voxels ...
 + Largest cluster has 23668 voxels
 + Clustering voxels ...
 + Largest cluster has 22554 voxels
 + Filled   328 voxels in small holes; now have 22882 voxels
 + Clustering voxels ...
 + Largest cluster has 22863 voxels
 + Clustering non-brain voxels ...
 + Clustering voxels ...
 + Largest cluster has 75438 voxels
 + Mask now has 22866 voxels
++ 22866 voxels in the mask [out of 98304: 23.26%]
++ first  10 x-planes are zero [from R]
++ last   12 x-planes are zero [from L]
++ first   4 y-planes are zero [from P]
++ last    9 y-planes are zero [from A]
++ first   0 z-planes are zero [from I]
++ last    0 z-planes are zero [from S]
++ applying mask to original data
++ Writing masked data
++ Output dataset ./__tt_vr_base_min_outlier_ts_ns+orig.BRIK
++ CPU time = 0.000000 sec
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ Output dataset ././__tt_vr_base_min_outlier_ts_ns_wt+orig.BRIK
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
++ lpc+ parameters: hel=0.40 mi=0.20 nmi=0.20 crA=0.40 ov=0.40 [to be zeroed at Final iteration]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./__tt_vr_base_min_outlier_ts_ns_wt+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./__tt_vr_base_min_outlier_ts_ns_wt+orig.BRIK is 4.700030 degrees from plumb.
++ Oblique dataset:./__tt_vr_base_min_outlier_ts_ns+orig.BRIK is 4.700030 degrees from plumb.
++ Source dataset: ./__tt_sub-ADS5115_SurfVol_ns_ob+orig.HEAD
++ Base dataset:   ./__tt_vr_base_min_outlier_ts_ns+orig.HEAD
++ Loading datasets
++ 1467911 voxels in -source_automask+2
++ Zero-pad: zbot=4 ztop=4
++ 22866 voxels [17.4%] in weight mask
++ Output dataset ./__tt_sub-ADS5115_SurfVol_ns_ob_al_junk_wtal+orig.BRIK
++ Number of points for matching = 22866
++ NOTE: base and source coordinate systems have different handedness
 +       Orientations: base=Left handed (RPI); source=Right handed (RAI)
++ Local correlation: blok type = 'RHDD(14.2219)'
++ -lpc+ parameters: hel=0.40 mi=0.20 nmi=0.20 crA=0.40 ov=0.40 [to be zeroed at Final iteration]
++ base center of mass = 31.675 31.246 16.479 (index)
 + source center of mass = 124.427 139.284 137.110 (index)
 + source-target CM = 0.430 12.208 -5.521 (xyz)
 + center of mass shifts = 0.430 12.208 -5.521
++ shift param auto-range: -65.9..66.8 -54.1..78.6 -55.3..44.2
 + Range param#4 [z-angle] = -6.000000 .. 6.000000
 + Range param#5 [x-angle] = -6.000000 .. 6.000000
 + Range param#6 [y-angle] = -6.000000 .. 6.000000
 + Range param#1 [x-shift] = -9.570030 .. 10.429970
 + Range param#2 [y-shift] = 2.208359 .. 22.208359
 + Range param#3 [z-shift] = -15.520973 .. 4.479027
 + Range param#4 [z-angle] = -45.000000 .. 45.000000
 + Range param#5 [x-angle] = -45.000000 .. 45.000000
 + Range param#6 [y-angle] = -45.000000 .. 45.000000
 + Range param#1 [x-shift] = -39.570030 .. 40.429970
 + Range param#2 [y-shift] = -27.791641 .. 52.208359
 + Range param#3 [z-shift] = -45.520973 .. 34.479027
 + 12 free parameters
++ Normalized convergence radius = 0.000467
++ changing output grid spacing to 1.0000 mm
++ OpenMP thread count = 1
++ ======= Allineation of 1 sub-bricks using Local Pearson Signed + Others =======
 + source mask has 1467911 [out of 19642624] voxels
 + base mask has 32669 [out of 131072] voxels
++ ========== sub-brick #0 ========== [total CPU to here=0.0 s]
++ *** Coarse pass begins ***
 + * Enter alignment setup routine
 + - copying base image
 + - copying source image
 + - Smoothing base; radius=5.00
 + - Smoothing source; radius=5.00
 + !source mask fill: ubot=20 usiz=40.5
 + - copying weight image
 + - using 22866 points from base image [use_all=2]
 + * Exit alignment setup routine
 + - Search for coarse starting parameters
 +  - histogram: source clip 26.5102 .. 102.115; base clip 188.736 .. 815.529
 +  - versus source range 3.22057 .. 98.8226; base range 0 .. 882.049
 + 19247 total points stored in 166 'RHDD(15.0752)' bloks
 + - number of free params = 6
 + - Testing (64+61)*64 params:#o+o+.++.-.*[#19=0.627877] *+.++o-.+o.*[#2108=0.624006] *$o-
 + - best 45 costs found:
    0 v= 0.624006: -12.90  -1.12   7.81 -15.00 -15.00 -30.00  [grid]
    1 v= 0.625243:  16.41  -7.28   0.20  20.53   3.14  10.08  [rand]
    2 v= 0.627877:  13.76  -1.12   7.81  15.00 -15.00  15.00  [grid]
    3 v= 0.653639: -15.55  -7.28   0.20 -20.53   3.14 -10.08  [rand]
    4 v= 0.666892: -12.90  -1.12   7.81 -30.00 -15.00 -15.00  [grid]
    5 v= 0.672136: -12.90  -1.12   7.81 -15.00 -15.00 -15.00  [grid]
    6 v= 0.678965:  16.41  -7.28   0.20  20.53  -3.14  10.08  [rand]
    7 v= 0.694028:  13.76  -1.12   7.81  30.00 -15.00  15.00  [grid]
    8 v= 0.694311: -26.24 -14.46   7.81 -30.00  15.00 -30.00  [grid]
    9 v= 0.705424:  13.76  -1.12   7.81  15.00 -15.00  30.00  [grid]
   10 v= 0.714828:  27.10 -14.46   7.81  30.00  15.00  30.00  [grid]
   11 v= 0.720862: -12.90 -14.46   7.81 -15.00  15.00 -30.00  [grid]
   12 v= 0.724756:  13.76  -1.12   7.81 -15.00 -15.00  30.00  [grid]
   13 v= 0.729360: -12.90  -1.12   7.81  15.00 -15.00 -30.00  [grid]
   14 v= 0.730667:   0.43  12.21  -5.52   0.00   0.00   0.00  [grid]
   15 v= 0.742675: -12.90  -1.12   7.81 -30.00 -15.00 -30.00  [grid]
   16 v= 0.751539:  -3.65   5.98   2.28   4.32 -22.85 -18.95  [rand]
   17 v= 0.754091: -12.90 -14.46   7.81 -30.00  15.00 -30.00  [grid]
   18 v= 0.762465: -15.55  -7.28   0.20 -20.53  -3.14 -10.08  [rand]
   19 v= 0.772888: -19.06  -4.46  -2.92 -30.54  19.59 -20.03  [rand]
   20 v= 0.776211: -12.90 -14.46   7.81 -30.00  15.00 -15.00  [grid]
   21 v= 0.781241: -26.24  -1.12   7.81 -30.00  15.00 -30.00  [grid]
   22 v= 0.794697:  26.74 -13.75  12.27  15.82  17.65  37.25  [rand]
   23 v= 0.800437:  16.57   2.74  18.83  20.99 -15.73  16.09  [rand]
   24 v= 0.803415:  13.76 -14.46   7.81  15.00  15.00  15.00  [grid]
   25 v= 0.812640:  27.10 -14.46   7.81  15.00  15.00  30.00  [grid]
   26 v= 0.814772:  -3.65   5.98   2.28  -4.32 -22.85 -18.95  [rand]
   27 v= 0.817602:  13.76 -14.46   7.81  15.00  15.00  30.00  [grid]
   28 v= 0.829358: -12.90 -14.46   7.81 -15.00  15.00 -15.00  [grid]
   29 v= 0.841891:  32.91  -2.48   6.29  11.16   9.40  34.39  [rand]
   30 v= 0.845561: -12.90  -1.12  21.15 -30.00 -15.00 -30.00  [grid]
   31 v= 0.872835:  27.10  -1.12  21.15  30.00 -15.00  30.00  [grid]
   32 v= 0.873234:  13.76  -1.12   7.81  30.00 -15.00 -15.00  [grid]
   33 v= 0.874425:   4.51   5.98   2.28  -4.32 -22.85  18.95  [rand]
   34 v= 0.874871:  20.21  -4.54  12.16   2.96  -2.59  18.65  [rand]
   35 v= 0.878445:  13.76 -14.46   7.81 -15.00  15.00  30.00  [grid]
   36 v= 0.879252: -15.71   2.74  18.83 -20.99 -15.73 -16.09  [rand]
   37 v= 0.881114: -19.06  -4.46  -8.12 -30.54  19.59 -20.03  [rand]
   38 v= 0.887004:  16.41  -7.28   0.20  20.53   3.14 -10.08  [rand]
   39 v= 0.888903:  13.76 -14.46   7.81  30.00  15.00  15.00  [grid]
   40 v= 0.890513:  13.76  -1.12   7.81 -30.00 -15.00  30.00  [grid]
   41 v= 0.892404: -12.90  -1.12  21.15 -15.00 -15.00 -30.00  [grid]
   42 v= 0.894202:  16.41  -7.28   0.20  20.53  -3.14 -10.08  [rand]
   43 v= 0.894770: -13.77   2.75  -0.68 -15.99  13.53 -29.93  [rand]
   44 v= 0.894896:   4.51   5.98   2.28   4.32 -22.85 -18.95  [rand]
*[#8003=0.595866] *[#8006=0.587767] *[#8010=0.56077] *[#8018=0.552523] *[#8019=0.548897] *[#8020=0.548385] *[#8021=0.546864] *[#8023=0.543769] *[#8025=0.543489] *[#8032=0.543128] *[#8072=0.542502] *[#8077=0.540594] *[#8082=0.538123] *[#8120=0.514679] *[#8128=0.509921] *[#8130=0.509722] *[#8135=0.508993] *[#8140=0.507544] *[#8751=0.505913] *[#8754=0.505233] *[#8755=0.503059] *[#8760=0.502069] *[#8765=0.501976] *[#8767=0.501434] *[#9185=0.501161] *[#9186=0.501147] *[#9188=0.499673] *[#9874=0.497532] *[#9875=0.492729] *[#9878=0.490882] *[#9879=0.482231] *[#9880=0.472714] *[#9882=0.470241] *[#9886=0.468322] *[#9889=0.467046]  + - costs of the above after a little optimization:
    0 v= 0.543128: -11.74   0.43   6.14 -12.72  -5.12 -28.16  [grid]
    1 v= 0.538123:  12.59  -3.48   0.10   9.14   2.04  13.41  [rand]
    2 v= 0.586988:  11.65   1.96   7.93  14.65 -14.39  15.18  [grid]
    3 v= 0.507544: -10.70  -5.80   1.98 -22.19   4.78 -12.92  [rand]
    4 v= 0.513656: -12.09  -3.94   2.65 -22.46   3.13 -13.81  [grid]
    5 v= 0.514626:  -8.00  -3.08   4.82 -17.77  -2.58 -17.91  [grid]
    6 v= 0.565737:  12.30  -1.19   1.02  14.44  -1.66  10.06  [rand]
    7 v= 0.575563:  14.71   0.31   2.21  18.17  -2.40  10.70  [grid]
    8 v= 0.544603: -20.23 -11.61   3.62 -29.17  15.49 -30.01  [grid]
    9 v= 0.548028:  15.06  -2.01   3.91   9.81   0.01  20.42  [grid]
   10 v= 0.661413:  24.78 -13.04   5.99  30.70  12.17  29.39  [grid]
   11 v= 0.529120: -15.20  -7.62   2.05 -13.55  11.80 -27.78  [grid]
   12 v= 0.585707:  10.56  -2.56   6.74  -6.70  -6.47  19.72  [grid]
   13 v= 0.569645: -11.37  -0.71   2.82   7.10  -6.25 -31.78  [grid]
   14 v= 0.537170:  -0.73   6.95   3.31   0.04  -4.94  -8.03  [grid]
   15 v= 0.587242: -13.70   0.86   9.15 -22.02 -11.90 -26.39  [grid]
   16 v= 0.507862:  -4.89   4.54   0.60  -1.66  -2.83 -10.27  [rand]
   17 v= 0.536546: -18.15 -10.62   4.33 -25.51  12.30 -31.99  [grid]
   18 v= 0.501434: -10.54  -4.47   2.30 -19.79   3.37 -15.57  [rand]
   19 v= 0.529663: -18.94  -6.27  -0.85 -17.56  13.95 -25.40  [rand]
   20 v= 0.555245: -12.86  -8.77   0.84 -28.05   8.69 -15.14  [grid]
   21 v= 0.579188: -26.69  -5.03   5.10 -28.95  11.67 -34.04  [grid]
   22 v= 0.684597:  24.64 -12.34   7.35  18.25  13.21  40.23  [rand]
   23 v= 0.583210:  13.99   3.99   7.60  13.87 -11.45  15.40  [rand]
   24 v= 0.598111:  13.65 -12.80  -1.05  16.72  15.81  14.35  [grid]
   25 v= 0.523837:   9.07  -6.71  -2.72   3.66  10.15  12.92  [grid]
   26 v= 0.551143:  -3.29   2.67   6.40   4.14 -18.17 -14.15  [rand]
   27 v= 0.603316:  16.48 -11.69   4.60  14.49  13.27  23.33  [grid]
   28 v= 0.499673:  -8.91  -7.89   0.07 -12.71  10.54 -17.61  [grid]
   29 v= 0.617435:  22.77  -3.97   3.85  13.01   6.81  27.92  [rand]
   30 v= 0.596401: -14.75   3.37  10.72 -16.81 -15.44 -33.78  [grid]
   31 v= 0.538627:  10.35   1.16   0.33   3.71  -0.75  10.02  [grid]
   32 v= 0.542320:   3.56  -2.72   5.02   9.81 -10.68  -3.63  [grid]
   33 v= 0.535172:   4.90   1.90  -2.36  -6.78   3.15  13.17  [rand]
   34 v= 0.561475:  16.83  -2.30   3.95  10.29  -0.09  19.08  [rand]
   35 v= 0.545147:  11.16  -9.01  -3.11   9.45  12.47  12.09  [grid]
   36 v= 0.499973: -11.25  -3.37   2.27 -17.70   2.59 -19.06  [rand]
   37 v= 0.543545: -20.41  -7.13   1.68 -25.69  11.34 -28.41  [rand]
   38 v= 0.540820:   8.68  -7.25  -4.57  12.03  10.74   2.47  [rand]
   39 v= 0.632131:  18.48 -11.53   2.12  25.25  12.17  18.29  [grid]
   40 v= 0.654036:  10.69  -0.18   4.10 -19.65 -10.08  32.27  [grid]
   41 v= 0.540520: -11.21  -3.73   6.95 -11.30  -2.25 -28.21  [grid]
  *42 v= 0.467046:   4.53  -7.61   1.27  -0.58   6.00   4.83  [rand]
   43 v= 0.535810: -17.58  -3.61   0.57 -16.13  11.27 -25.35  [rand]
   44 v= 0.568151:   1.92   5.88   5.30   9.39 -15.45 -14.91  [rand]
 + - save #42 for twobest
 + - save #28 for twobest
 + - save #36 for twobest
 + - skip #18 for twobest: too close to set #36
 + - skip # 3 for twobest: too close to set #18
 + - save #16 for twobest
 + - skip # 4 for twobest: too close to set #18
 + - save # 5 for twobest
 + - save #25 for twobest
 + - save #11 for twobest
 + - skip #19 for twobest: too close to set #11
 + - save #33 for twobest
 + - skip #43 for twobest: too close to set #19
 + - save #17 for twobest
 + - save #14 for twobest
 + - save # 1 for twobest
 + - save #31 for twobest
 + - save #41 for twobest
 + - save #38 for twobest
 + - save #32 for twobest
 + - save # 0 for twobest
 + - skip #37 for twobest: too close to set #17
 + - skip # 8 for twobest: too close to set #17
 + - save #35 for twobest
 + - save # 9 for twobest
 + - save #26 for twobest
 + - save #20 for twobest
 + - skip #34 for twobest: too close to set # 9
 + - save # 6 for twobest
 + - save #44 for twobest
 + - Coarse startup search net CPU time = 0.0 s
++ Start refinement #1 on 12 coarse parameter sets
 + * Enter alignment setup routine
 + - Smoothing base; radius=3.89
 + - Smoothing source; radius=3.89
 + !source mask fill: ubot=20 usiz=40.5
 + - retaining old weight image
 + - using 22866 points from base image [use_all=2]
 + * Exit alignment setup routine
 +  - histogram: source clip 26.4263 .. 102.847; base clip 190.902 .. 824.889
 +  - versus source range 1.00063 .. 98.8474; base range 0 .. 892.002
 + 19641 total points stored in 187 'RHDD(14.7439)' bloks
*[#9987=0.451691] *[#9990=0.44943] *[#9998=0.441421] *[#10007=0.439722] *[#10008=0.439293] *[#10012=0.434984] *[#10015=0.434823] *[#10017=0.434407] *[#10020=0.433809] *[#10021=0.43322] *[#10024=0.430824] *[#10025=0.42919] *[#10026=0.428218] *[#10029=0.426496] *[#10030=0.424797] *[#10031=0.424065] *[#10032=0.423738] *[#10034=0.422756] *[#10035=0.421068] *[#10036=0.419545] *[#10037=0.418729] *[#10039=0.418593] *[#10042=0.417684] *[#10043=0.416288] *[#10044=0.415165] *[#10047=0.415071] *[#10049=0.414416] *[#10051=0.41431] *[#10052=0.414264] *[#10053=0.413092] *[#10054=0.412196] *[#10055=0.411717] *[#10056=0.411253] *[#10057=0.410834] *[#10058=0.410012] *[#10059=0.40841] *[#10061=0.408108] *[#10062=0.406962] *[#10063=0.406268] *[#10068=0.405738] 
 + - param set #1 has cost=0.405738
 + -- Parameters = 1.5967 -7.0504 4.2813 0.7948 2.6559 -0.6534 0.9851 0.9862 0.9939 -0.0017 -0.0055 0.0179
*[#10126=0.4014] *[#10127=0.400941] *[#10128=0.397838] *[#10135=0.396742] *[#10138=0.393833] *[#10141=0.393322] *[#10144=0.392543] *[#10153=0.390937] *[#10154=0.390275] *[#10157=0.386502] *[#10158=0.386367] *[#10160=0.38046] *[#10161=0.376736] *[#10162=0.373166] *[#10163=0.365329] 
 + - param set #2 has cost=0.365329
 + -- Parameters = -16.8991 -14.8984 13.9310 -17.2523 17.0922 -26.1230 0.8600 0.9501 0.9606 -0.0416 0.0122 0.0371
 + - param set #3 has cost=0.370806
 + -- Parameters = -9.3214 -8.8314 7.4721 -20.4332 8.6783 -15.3668 0.8783 0.9671 1.0355 0.0445 0.0273 -0.0350
 + - param set #4 has cost=0.499748
 + -- Parameters = -7.0897 4.4296 1.0852 -2.9372 -3.0594 -12.3159 0.9851 0.9865 1.0028 -0.0012 0.0034 -0.0014
 + - param set #5 has cost=0.389015
 + -- Parameters = -9.0813 -9.9905 4.8742 -16.3797 12.9178 -24.0934 0.8796 0.9539 1.0254 -0.0263 0.0100 0.0037
 + - param set #6 has cost=0.456438
 + -- Parameters = 8.2393 -8.5785 -2.0503 6.3484 13.6389 6.6954 0.9687 0.9873 0.9833 0.0047 -0.0017 -0.0211
 + - param set #7 has cost=0.396258
 + -- Parameters = -15.6073 -10.7681 2.6532 -16.9975 13.5958 -27.3672 0.9573 0.9939 0.9692 0.0047 -0.0010 -0.0313
 + - param set #8 has cost=0.503206
 + -- Parameters = 4.4067 -1.5956 -2.3256 -6.7555 7.3007 13.3078 0.9815 0.9875 0.9927 -0.0008 0.0006 0.0006
 + - param set #9 has cost=0.402345
 + -- Parameters = -17.7395 -10.1686 9.2627 -27.2351 8.4822 -36.9920 0.9589 0.9621 0.9855 0.0152 0.0039 -0.0109
 + - param set #10 has cost=0.465724
 + -- Parameters = -2.6979 11.2744 6.7318 -3.8078 -4.8858 -9.2368 0.9879 0.9436 0.9669 0.0697 -0.0193 -0.0452
 + - param set #11 has cost=0.432614
 + -- Parameters = 3.7890 -3.7488 4.2334 0.2282 -0.3706 1.8102 0.9805 1.0084 1.0022 -0.0052 0.0115 -0.0173
 + - param set #12 has cost=0.500841
 + -- Parameters = 0.7268 6.9595 1.1343 -0.3517 5.9690 1.6428 0.9852 0.9814 0.9693 -0.0007 0.0070 0.0072
 + - sorting parameter sets by cost
 + -- scanning for distances from #1
 + --- dist(#2,#1) = 0.387 
 + --- dist(#3,#1) = 0.177 
 + --- dist(#4,#1) = 0.308 
 + --- dist(#5,#1) = 0.27 
 + --- dist(#6,#1) = 0.341 
 + --- dist(#7,#1) = 0.328 
 + --- dist(#8,#1) = 0.365 
 + --- dist(#9,#1) = 0.501 
 + --- dist(#10,#1) = 0.341 
 + --- dist(#11,#1) = 0.341 
 + --- dist(#12,#1) = 0.438 
++ Start refinement #2 on 12 coarse parameter sets
 + * Enter alignment setup routine
 + - Smoothing base; radius=3.02
 + - Smoothing source; radius=3.02
 + !source mask fill: ubot=20 usiz=40.5
 + - retaining old weight image
 + - using 22866 points from base image [use_all=2]
 + * Exit alignment setup routine
 +  - histogram: source clip 26.5252 .. 104.111; base clip 192.64 .. 832.396
 +  - versus source range 0.167904 .. 98.8887; base range 0 .. 900.513
 + 20158 total points stored in 201 'RHDD(14.5398)' bloks
 + - param set #1 has cost=0.368053
 + -- Parameters = -14.8554 -14.9108 15.2078 -18.4370 17.6112 -26.6554 0.8609 0.9397 0.9504 -0.0425 0.0176 0.0402
 + - param set #2 has cost=0.376433
 + -- Parameters = -9.3848 -9.0095 8.6688 -25.6272 7.9657 -17.0124 0.8661 0.9486 1.0404 0.0429 0.0253 -0.0360
 + - param set #3 has cost=0.378662
 + -- Parameters = -9.4194 -9.5206 12.6921 -18.5047 12.6123 -22.4445 0.8664 0.9281 1.0119 -0.0307 -0.0209 0.0098
 + - param set #4 has cost=0.409773
 + -- Parameters = -15.2256 -11.1928 4.0656 -17.8975 15.9717 -27.3877 0.9498 0.9926 0.9666 0.0039 -0.0030 -0.0359
 + - param set #5 has cost=0.408506
 + -- Parameters = -17.4390 -10.6746 11.3641 -27.1704 8.5463 -37.2987 0.9499 0.9567 0.9826 0.0139 0.0032 -0.0137
 + - param set #6 has cost=0.409863
 + -- Parameters = 1.5965 -6.5987 4.5884 0.4418 2.1649 -0.9129 0.9837 0.9829 0.9959 -0.0043 -0.0102 0.0168
 + - param set #7 has cost=0.402341
 + -- Parameters = 1.3368 -3.4669 4.8198 1.6248 -1.3164 -1.5939 0.9681 0.9803 1.0214 0.0323 0.0023 -0.0211
 + - param set #8 has cost=0.478736
 + -- Parameters = 7.3261 -8.7035 -1.4439 5.8176 13.2226 6.5125 0.9626 0.9935 0.9796 0.0053 -0.0033 -0.0223
 + - param set #9 has cost=0.485674
 + -- Parameters = -2.4171 11.0106 7.5569 -3.7136 -4.9245 -8.7918 0.9869 0.9435 0.9648 0.0708 -0.0191 -0.0459
 + - param set #10 has cost=0.506379
 + -- Parameters = -8.1671 5.0347 1.3987 -3.7731 -2.9314 -11.9827 0.9843 0.9876 1.0022 0.0007 0.0144 0.0003
 + - param set #11 has cost=0.493110
 + -- Parameters = 0.8732 7.6970 2.3600 -1.9224 7.3346 1.1105 0.9866 0.9788 0.9514 -0.0022 0.0123 0.0044
 + - param set #12 has cost=0.499911
 + -- Parameters = 2.9540 -4.0245 -3.5683 -7.0289 8.3599 10.7366 0.9753 0.9912 0.9865 -0.0056 -0.0024 -0.0097
 + - sorting parameter sets by cost
 + -- scanning for distances from #1
 + --- dist(#2,#1) = 0.385 
 + --- dist(#3,#1) = 0.173 
 + --- dist(#4,#1) = 0.337 
 + --- dist(#5,#1) = 0.254 
 + --- dist(#6,#1) = 0.342 
 + --- dist(#7,#1) = 0.335 
 + --- dist(#8,#1) = 0.369 
 + --- dist(#9,#1) = 0.51 
 + --- dist(#10,#1) = 0.343 
 + --- dist(#11,#1) = 0.415 
 + --- dist(#12,#1) = 0.336 
++ Start refinement #3 on 12 coarse parameter sets
 + * Enter alignment setup routine
 + - Smoothing base; radius=2.35
 + - Smoothing source; radius=2.35
 + !source mask fill: ubot=20 usiz=40.5
 + - retaining old weight image
 + - using 22866 points from base image [use_all=2]
 + * Exit alignment setup routine
 +  - histogram: source clip 26.4911 .. 104.646; base clip 193.773 .. 837.294
 +  - versus source range 0.010412 .. 98.8667; base range 0 .. 904.598
 + 19647 total points stored in 197 'RHDD(14.415)' bloks
 + - param set #1 has cost=0.374053
 + -- Parameters = -12.9790 -13.6398 15.9666 -19.8701 16.3788 -25.5184 0.8672 0.9375 0.9469 -0.0364 0.0166 0.0410
 + - param set #2 has cost=0.389848
 + -- Parameters = -8.5388 -9.7898 10.0472 -25.6678 8.2041 -16.8629 0.8641 0.9449 1.0177 0.0450 0.0255 -0.0442
 + - param set #3 has cost=0.388694
 + -- Parameters = -10.0972 -10.3429 13.4894 -21.6456 13.8290 -22.1733 0.8614 0.9257 0.9975 -0.0381 -0.0371 -0.0030
 + - param set #4 has cost=0.391070
 + -- Parameters = 2.1728 -3.0807 5.2980 1.6275 -1.6496 -1.4001 0.9732 0.9812 1.0203 0.0313 0.0063 -0.0207
 + - param set #5 has cost=0.421236
 + -- Parameters = -17.4394 -10.6100 11.6286 -27.1314 8.2288 -37.4114 0.9499 0.9568 0.9845 0.0134 0.0032 -0.0139
 + - param set #6 has cost=0.425008
 + -- Parameters = -15.2013 -12.5868 5.0440 -19.8275 15.3531 -28.0008 0.9462 0.9943 0.9567 0.0015 -0.0024 -0.0385
 + - param set #7 has cost=0.401650
 + -- Parameters = 1.9306 -5.4369 5.3028 0.5853 1.3741 -0.4333 0.9837 0.9818 1.0037 -0.0035 -0.0110 0.0242
 + - param set #8 has cost=0.475239
 + -- Parameters = 7.4100 -7.1237 -1.0593 4.8222 13.7435 6.4244 0.9607 0.9898 0.9828 0.0039 -0.0032 -0.0231
 + - param set #9 has cost=0.477477
 + -- Parameters = -2.4616 10.8326 8.0720 -5.1320 -4.8199 -4.6979 0.9893 0.9422 0.9620 0.0663 -0.0199 -0.0480
 + - param set #10 has cost=0.454843
 + -- Parameters = 0.9759 8.0455 5.9336 -3.0357 7.6437 3.3035 1.0032 0.9523 0.8951 0.0048 0.0476 -0.0178
 + - param set #11 has cost=0.486054
 + -- Parameters = 2.4465 -4.5181 -1.9630 -6.9366 9.9509 10.7852 0.9749 0.9896 0.9817 -0.0035 -0.0026 -0.0092
 + - param set #12 has cost=0.484873
 + -- Parameters = -7.5798 4.7043 1.9771 -6.7416 -1.1157 -7.7432 0.9713 0.9825 1.0107 0.0062 0.0122 -0.0070
 + - sorting parameter sets by cost
 + -- scanning for distances from #1
 + --- dist(#2,#1) = 0.241 
 + --- dist(#3,#1) = 0.383 
 + --- dist(#4,#1) = 0.304 
 + --- dist(#5,#1) = 0.317 
 + --- dist(#6,#1) = 0.247 
 + --- dist(#7,#1) = 0.358 
 + --- dist(#8,#1) = 0.371 
 + --- dist(#9,#1) = 0.355 
 + --- dist(#10,#1) = 0.462 
 + --- dist(#11,#1) = 0.284 
 + --- dist(#12,#1) = 0.403 
 + - Total coarse refinement net CPU time = 0.0 s; 3345 funcs
++ *** Fine pass begins ***
 + * Enter alignment setup routine
 + - Smoothing base; radius=1.00
 + - Smoothing source; radius=1.00
 + !source mask fill: ubot=20 usiz=40.5
 + - retaining old weight image
 + * Exit alignment setup routine
++ Picking best parameter set out of 13 cases
 +  - histogram: source clip 26.4083 .. 105.673; base clip 193.773 .. 837.294
 +  - versus source range 9.08436e-12 .. 98.9141; base range 0 .. 908.644
 + 19967 total points stored in 206 'RHDD(14.2739)' bloks
 + - cost(#1)=0.409076 *
 + -- Parameters = -12.9790 -13.6398 15.9666 -19.8701 16.3788 -25.5184 0.8672 0.9375 0.9469 -0.0364 0.0166 0.0410
 + - cost(#2)=0.421492  
 + -- Parameters = -10.0972 -10.3429 13.4894 -21.6456 13.8290 -22.1733 0.8614 0.9257 0.9975 -0.0381 -0.0371 -0.0030
 + - cost(#3)=0.414554  
 + -- Parameters = -8.5388 -9.7898 10.0472 -25.6678 8.2041 -16.8629 0.8641 0.9449 1.0177 0.0450 0.0255 -0.0442
 + - cost(#4)=0.431111  
 + -- Parameters = 2.1728 -3.0807 5.2980 1.6275 -1.6496 -1.4001 0.9732 0.9812 1.0203 0.0313 0.0063 -0.0207
 + - cost(#5)=0.437243  
 + -- Parameters = 1.9306 -5.4369 5.3028 0.5853 1.3741 -0.4333 0.9837 0.9818 1.0037 -0.0035 -0.0110 0.0242
 + - cost(#6)=0.452610  
 + -- Parameters = -17.4394 -10.6100 11.6286 -27.1314 8.2288 -37.4114 0.9499 0.9568 0.9845 0.0134 0.0032 -0.0139
 + - cost(#7)=0.454662  
 + -- Parameters = -15.2013 -12.5868 5.0440 -19.8275 15.3531 -28.0008 0.9462 0.9943 0.9567 0.0015 -0.0024 -0.0385
 + - cost(#8)=0.476074  
 + -- Parameters = 0.9759 8.0455 5.9336 -3.0357 7.6437 3.3035 1.0032 0.9523 0.8951 0.0048 0.0476 -0.0178
 + - cost(#9)=0.492906  
 + -- Parameters = 7.4100 -7.1237 -1.0593 4.8222 13.7435 6.4244 0.9607 0.9898 0.9828 0.0039 -0.0032 -0.0231
 + - cost(#10)=0.496173  
 + -- Parameters = -2.4616 10.8326 8.0720 -5.1320 -4.8199 -4.6979 0.9893 0.9422 0.9620 0.0663 -0.0199 -0.0480
 + - cost(#11)=0.502769  
 + -- Parameters = -7.5798 4.7043 1.9771 -6.7416 -1.1157 -7.7432 0.9713 0.9825 1.0107 0.0062 0.0122 -0.0070
 + - cost(#12)=0.498881  
 + -- Parameters = 2.4465 -4.5181 -1.9630 -6.9366 9.9509 10.7852 0.9749 0.9896 0.9817 -0.0035 -0.0026 -0.0092
 + - cost(#13)=0.729807  
 + -- Parameters = 0.4300 12.2084 -5.5210 0.0000 0.0000 0.0000 1.0000 1.0000 1.0000 0.0000 0.0000 0.0000
 + -num_rtb 99 ==> refine all 13 cases
 + - cost(#1)=0.403043 *
 + -- Parameters = -12.3794 -13.7758 16.2892 -20.3137 16.6062 -26.2041 0.8665 0.9353 0.9457 -0.0371 0.0158 0.0403
 + - cost(#2)=0.415103  
 + -- Parameters = -9.9154 -11.0087 13.6238 -23.5918 13.4942 -23.2999 0.8594 0.9231 0.9976 -0.0381 -0.0374 -0.0037
 + - cost(#3)=0.412683  
 + -- Parameters = -8.3666 -9.6805 10.5417 -25.7616 8.1183 -16.6141 0.8639 0.9426 1.0177 0.0448 0.0253 -0.0476
 + - cost(#4)=0.426918  
 + -- Parameters = 1.7524 -2.5044 5.2216 2.2034 -1.8259 -1.0449 0.9723 0.9833 1.0216 0.0271 0.0033 -0.0204
 + - cost(#5)=0.435247  
 + -- Parameters = 2.1041 -5.2338 5.4753 0.6432 1.2723 -0.3745 0.9842 0.9828 1.0036 -0.0076 -0.0112 0.0247
 + - cost(#6)=0.447995  
 + -- Parameters = -16.9411 -10.5192 11.4371 -28.6985 8.1270 -37.9550 0.9534 0.9523 0.9824 0.0145 0.0029 -0.0140
 + - cost(#7)=0.444524  
 + -- Parameters = -14.4799 -12.8615 7.6242 -19.3665 15.0970 -29.1699 0.9411 0.9882 0.9562 0.0000 -0.0025 -0.0369
 + - cost(#8)=0.470589  
 + -- Parameters = 1.1149 7.4851 6.4620 -3.6231 7.8210 2.7471 1.0024 0.9527 0.8956 0.0026 0.0460 -0.0183
 + - cost(#9)=0.482888  
 + -- Parameters = 7.0013 -7.1124 -0.6521 4.5835 14.2832 7.2215 0.9600 1.0000 0.9628 0.0140 -0.0366 -0.0248
 + - cost(#10)=0.492145  
 + -- Parameters = -2.4520 10.7150 8.3012 -5.3364 -5.0953 -4.9277 0.9888 0.9439 0.9636 0.0589 -0.0202 -0.0467
 + - cost(#11)=0.498649  
 + -- Parameters = -7.8570 4.9967 2.0784 -7.3397 -0.8811 -7.8462 0.9736 0.9847 0.9998 0.0030 0.0110 -0.0085
 + - cost(#12)=0.495219  
 + -- Parameters = 2.4017 -4.8510 -1.4969 -6.9887 9.9142 10.7172 0.9673 0.9896 0.9824 -0.0033 -0.0029 -0.0103
 + - cost(#13)=0.465093  
 + -- Parameters = -1.8783 5.5123 9.2613 -4.1802 -5.6978 0.2299 0.9294 1.0733 0.9470 0.0008 0.0137 -0.0023
 + - case #1 is now the best
 + - Initial  cost = 0.403043
 + - Initial fine Parameters = -12.3794 -13.7758 16.2892 -20.3137 16.6062 -26.2041 0.8665 0.9353 0.9457 -0.0371 0.0158 0.0403
 + - Finalish cost = 0.402998 ; 82 funcs
 +  - Set lpc+ parameters back to pure lpc before Final
 +  - histogram: source clip 26.3493 .. 105.584; base clip 193.773 .. 837.294
 +  - versus source range 9.08436e-12 .. 98.9141; base range 0 .. 908.644
*[#14782=-0.10526] *[#14826=-0.105966] *[#14830=-0.106012] *[#14832=-0.106104] *[#14834=-0.106109] *[#14840=-0.10625] *[#14843=-0.106341] *[#14844=-0.106432] *[#14846=-0.106499] *[#14847=-0.106724] *[#14857=-0.106898] *[#14864=-0.107073] *[#14867=-0.107133] *[#14871=-0.107134] *[#14873=-0.107164] *[#14879=-0.107288] *[#14881=-0.107416] *[#14882=-0.10755] *[#14895=-0.107696] *[#14897=-0.10773] *[#14901=-0.108066] *[#14904=-0.108253] *[#14905=-0.108264] *[#14909=-0.108408] *[#14912=-0.108562] *[#14913=-0.1089] *[#14914=-0.109239] *[#14917=-0.109301] *[#14919=-0.109457] *[#14920=-0.109569] *[#14931=-0.109652] *[#14941=-0.10969] *[#14948=-0.10973] *[#14959=-0.109776] *[#14964=-0.109917] *[#14981=-0.109956] *[#14983=-0.110114] *[#14984=-0.110188] *[#14985=-0.110263] *[#15000=-0.110285] *[#15002=-0.110325] *[#15003=-0.110332] *[#15008=-0.110459] *[#15012=-0.110479] *[#15013=-0.110806] *[#15014=-0.110946] *[#15019=-0.11098] *[#15029=-0.11118] *[#15032=-0.111184] *[#15040=-0.111196] *[#15045=-0.111382] *[#15066=-0.111448] *[#15069=-0.111464] *[#15082=-0.111499] *[#15086=-0.1115] *[#15090=-0.111502] *[#15097=-0.111512] *[#15098=-0.111543] *[#15101=-0.111552] *[#15112=-0.111569] *[#15120=-0.111642] *[#15125=-0.111768] *[#15140=-0.111813] *[#15141=-0.11182] *[#15157=-0.111848] *[#15162=-0.111867] *[#15164=-0.111976] *[#15173=-0.111976] *[#15179=-0.112035] *[#15192=-0.112066] *[#15193=-0.112097] *[#15200=-0.112254] *[#15201=-0.112281] *[#15218=-0.112313] *[#15225=-0.112371] *[#15236=-0.112458] *[#15245=-0.11248] *[#15261=-0.112495] *[#15263=-0.11253] *[#15264=-0.112538] *[#15269=-0.112576] *[#15272=-0.112609] *[#15278=-0.112654] *[#15279=-0.112738] *[#15292=-0.112767] *[#15298=-0.112771] *[#15316=-0.112824] *[#15321=-0.112864] *[#15322=-0.112867] *[#15324=-0.112891] *[#15327=-0.112892] *[#15329=-0.112899] *[#15331=-0.112905] *[#15332=-0.112907] *[#15334=-0.112922] *[#15335=-0.112932] *[#15354=-0.112934] *[#15360=-0.112934] *[#15368=-0.11294] *[#15369=-0.112942] *[#15370=-0.112943] *[#15379=-0.112949] *[#15386=-0.112954] *[#15387=-0.112957] *[#15390=-0.112958] *[#15395=-0.112962] *[#15396=-0.112964] *[#15403=-0.112969] *[#15406=-0.112973] *[#15407=-0.112975] *[#15408=-0.112976] *[#15411=-0.112984] *[#15412=-0.112987] *[#15413=-0.112991] *[#15414=-0.112996] *[#15417=-0.112997] *[#15419=-0.113005] *[#15420=-0.113013] *[#15427=-0.113016] *[#15428=-0.113018] *[#15429=-0.113022] *[#15430=-0.113025] *[#15431=-0.113025] *[#15435=-0.11303] *[#15436=-0.113034] *[#15441=-0.113045] *[#15442=-0.113045] *[#15443=-0.113049] *[#15444=-0.113053] *[#15445=-0.113058] *[#15448=-0.113066] *[#15449=-0.113077] *[#15450=-0.11309] *[#15452=-0.113094] *[#15453=-0.113103] *[#15454=-0.113103] *[#15456=-0.113118] *[#15457=-0.113123] *[#15458=-0.113125] *[#15471=-0.113126] *[#15473=-0.11313] *[#15474=-0.113132] *[#15475=-0.113136] *[#15476=-0.113141] *[#15483=-0.113148] *[#15484=-0.113159] *[#15485=-0.113178] *[#15492=-0.113179] *[#15493=-0.113184] *[#15496=-0.113189] *[#15497=-0.113195] *[#15500=-0.11321] *[#15503=-0.113217] *[#15504=-0.113223] *[#15505=-0.113228] *[#15506=-0.113231] *[#15507=-0.113239] *[#15508=-0.113248] *[#15509=-0.113252] *[#15510=-0.113257] *[#15515=-0.113264] *[#15516=-0.113266] *[#15517=-0.113273] *[#15518=-0.113275] *[#15519=-0.113295] *[#15520=-0.113298] *[#15521=-0.113328] *[#15522=-0.113339] *[#15527=-0.113368] *[#15528=-0.113376] *[#15529=-0.113381] *[#15530=-0.113391] *[#15531=-0.113399] *[#15532=-0.113404] *[#15533=-0.11341] *[#15534=-0.113421] *[#15535=-0.113431] *[#15536=-0.113444] *[#15537=-0.113455] *[#15540=-0.113465] *[#15542=-0.113495] *[#15547=-0.11351] *[#15560=-0.113514] *[#15564=-0.113521] *[#15565=-0.113523] *[#15568=-0.113524] *[#15575=-0.113529] *[#15577=-0.113534] *[#15578=-0.113537] *[#15579=-0.11354] *[#15582=-0.113551] *[#15583=-0.113552] *[#15586=-0.113554] *[#15587=-0.113562] *[#15596=-0.113562] *[#15598=-0.113563] *[#15609=-0.113567] *[#15618=-0.113571] *[#15623=-0.113572] *[#15629=-0.113572] *[#15633=-0.113576] 
 + - Final    cost = -0.113576 ; 871 funcs
 + Final fine fit Parameters:
       x-shift=-13.5184   y-shift=-11.2734   z-shift=19.8233
       z-angle=-21.6951   x-angle=14.4484   y-angle=-26.2423
       x-scale= 0.8755   y-scale= 0.9340   z-scale= 0.9190
     y/x-shear=-0.0479 z/x-shear= 0.0088 z/y-shear= 0.0368
 + - Fine net CPU time = 0.0 s
++ Computing output image
++ image warp: parameters = -13.5184 -11.2734 19.8233 -21.6951 14.4484 -26.2423 0.8755 0.9340 0.9190 -0.0479 0.0088 0.0368
++ Output dataset ./__tt_sub-ADS5115_SurfVol_ns_ob_temp_al_junk+orig.BRIK
++ Wrote -1Dmatrix_save ./sub-ADS5115_SurfVol_al_junk_e2a_only_mat.aff12.1D
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 50.1
++ ###########################################################
++ #   Please check results visually for alignment quality   #
++ ###########################################################
++ #   '-autoweight' is recommended when using -lpc or -lpa  #
++ #   If your results are not good, please try again.       #
++ ###########################################################
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./__tt_vr_base_min_outlier_ts_ns+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./__tt_vr_base_min_outlier_ts_ns+orig.BRIK is 4.700030 degrees from plumb.
++ Source dataset: ./__tt_sub-ADS5115_SurfVol_ns+orig.HEAD
++ Base dataset:   ./__tt_vr_base_min_outlier_ts_ns+orig.HEAD
++ Loading datasets
 + Range param#4 [z-angle] = -6.000000 .. 6.000000
 + Range param#5 [x-angle] = -6.000000 .. 6.000000
 + Range param#6 [y-angle] = -6.000000 .. 6.000000
 + Range param#1 [x-shift] = -10.000000 .. 10.000000
 + Range param#2 [y-shift] = -10.000000 .. 10.000000
 + Range param#3 [z-shift] = -10.000000 .. 10.000000
 + Range param#4 [z-angle] = -45.000000 .. 45.000000
 + Range param#5 [x-angle] = -45.000000 .. 45.000000
 + Range param#6 [y-angle] = -45.000000 .. 45.000000
 + Range param#1 [x-shift] = -40.000000 .. 40.000000
 + Range param#2 [y-shift] = -40.000000 .. 40.000000
 + Range param#3 [z-shift] = -40.000000 .. 40.000000
++ changing output grid spacing to 1.0000 mm
++ OpenMP thread count = 1
++ ========== Applying transformation to 1 sub-bricks ==========
++ ========== sub-brick #0 ========== [total CPU to here=0.0 s]
 + * Enter alignment setup routine
 + - copying base image
 + - copying source image
 + - no weight image
 + - using 11 points from base image [use_all=0]
 + * Exit alignment setup routine
++ using -1Dmatrix_apply
++ Computing output image
++ image warp: parameters = 0.6939 0.3800 0.3749 1.2487 0.4584 -0.0836 -0.7898 118.8394 -0.2645 0.8546 -0.2808 93.6090
++ Output dataset ./sub-ADS5115_SurfVol_al_junk+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 0.9
++ ###########################################################
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
foreach run ( 01 )
3dvolreg -verbose -zpad 1 -base vr_base_min_outlier+orig -1Dfile dfile.r01.1D -prefix rm.epi.volreg.r01 -Fourier -1Dmatrix_save mat.r01.vr.aff12.1D pb01.sub-ADS5115.r01.despike+orig
++ 3dvolreg: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./vr_base_min_outlier+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./vr_base_min_outlier+orig.BRIK is 4.700030 degrees from plumb.
++ Reading in base dataset ./vr_base_min_outlier+orig.BRIK
++ Oblique dataset:./pb01.sub-ADS5115.r01.despike+orig.BRIK is 4.700030 degrees from plumb.
++ Reading input dataset ./pb01.sub-ADS5115.r01.despike+orig.BRIK
++ Edging: x=3 y=3 z=1
++ Creating mask for -maxdisp
 + Automask has 25083 voxels
 + 4697 voxels left in -maxdisp mask after erosion
++ Initializing alignment base
++ Starting final pass on 505 sub-bricks: 0..1..2..3..4..5..6..7..8..9..10..11..12..13..14..15..16..17..18..19..20..21..22..23..24..25..26..27..28..29..30..31..32..33..34..35..36..37..38..39..40..41..42..43..44..45..46..47..48..49..50..51..52..53..54..55..56..57..58..59..60..61..62..63..64..65..66..67..68..69..70..71..72..73..74..75..76..77..78..79..80..81..82..83..84..85..86..87..88..89..90..91..92..93..94..95..96..97..98..99..100..101..102..103..104..105..106..107..108..109..110..111..112..113..114..115..116..117..118..119..120..121..122..123..124..125..126..127..128..129..130..131..132..133..134..135..136..137..138..139..140..141..142..143..144..145..146..147..148..149..150..151..152..153..154..155..156..157..158..159..160..161..162..163..164..165..166..167..168..169..170..171..172..173..174..175..176..177..178..179..180..181..182..183..184..185..186..187..188..189..190..191..192..193..194..195..196..197..198..199..200..201..202..203..204..205..206..207..208..209..210..211..212..213..214..215..216..217..218..219..220..221..222..223..224..225..226..227..228..229..230..231..232..233..234..235..236..237..238..239..240..241..242..243..244..245..246..247..248..249..250..251..252..253..254..255..256..257..258..259..260..261..262..263..264..265..266..267..268..269..270..271..272..273..274..275..276..277..278..279..280..281..282..283..284..285..286..287..288..289..290..291..292..293..294..295..296..297..298..299..300..301..302..303..304..305..306..307..308..309..310..311..312..313..314..315..316..317..318..319..320..321..322..323..324..325..326..327..328..329..330..331..332..333..334..335..336..337..338..339..340..341..342..343..344..345..346..347..348..349..350..351..352..353..354..355..356..357..358..359..360..361..362..363..364..365..366..367..368..369..370..371..372..373..374..375..376..377..378..379..380..381..382..383..384..385..386..387..388..389..390..391..392..393..394..395..396..397..398..399..400..401..402..403..404..405..406..407..408..409..410..411..412..413..414..415..416..417..418..419..420..421..422..423..424..425..426..427..428..429..430..431..432..433..434..435..436..437..438..439..440..441..442..443..444..445..446..447..448..449..450..451..452..453..454..455..456..457..458..459..460..461..462..463..464..465..466..467..468..469..470..471..472..473..474..475..476..477..478..479..480..481..482..483..484..485..486..487..488..489..490..491..492..493..494..495..496..497..498..499..500..501..502..503..504..
++ CPU time for realignment=0 s  [=0 s/sub-brick]
++ Min : roll=-0.011  pitch=-0.230  yaw=-0.274  dS=-0.860  dL=-0.069  dP=-0.085
++ Mean: roll=+0.049  pitch=-0.122  yaw=-0.070  dS=-0.397  dL=-0.023  dP=+0.007
++ Max : roll=+0.174  pitch=+0.018  yaw=+0.013  dS=+0.037  dL=+0.039  dP=+0.095
++ Max displacements (mm) for each sub-brick:
 0.10(0.00) 0.05(0.13) 0.03(0.05) 0.09(0.07) 0.05(0.09) 0.04(0.04) 0.05(0.03) 0.04(0.04) 0.06(0.05) 0.05(0.09) 0.07(0.10) 0.04(0.03) 0.04(0.06) 0.09(0.11) 0.05(0.12) 0.04(0.08) 0.00(0.04) 0.06(0.06) 0.02(0.07) 0.05(0.06) 0.03(0.03) 0.03(0.01) 0.07(0.05) 0.05(0.10) 0.08(0.11) 0.02(0.09) 0.06(0.07) 0.04(0.07) 0.05(0.04) 0.03(0.03) 0.05(0.03) 0.04(0.02) 0.05(0.06) 0.08(0.10) 0.05(0.10) 0.07(0.08) 0.06(0.06) 0.06(0.05) 0.06(0.04) 0.07(0.06) 0.06(0.05) 0.05(0.06) 0.08(0.07) 0.04(0.07) 0.07(0.05) 0.06(0.02) 0.09(0.05) 0.06(0.09) 0.11(0.12) 0.07(0.09) 0.05(0.03) 0.11(0.07) 0.07(0.06) 0.10(0.04) 0.12(0.07) 0.13(0.03) 0.10(0.08) 0.13(0.13) 0.11(0.10) 0.09(0.07) 0.13(0.04) 0.08(0.08) 0.11(0.05) 0.10(0.04) 0.10(0.06) 0.10(0.05) 0.12(0.09) 0.15(0.07) 0.14(0.07) 0.16(0.08) 0.12(0.04) 0.19(0.09) 0.14(0.09) 0.17(0.10) 0.15(0.04) 0.13(0.04) 0.16(0.04) 0.11(0.08) 0.15(0.10) 0.09(0.09) 0.10(0.04) 0.15(0.06) 0.11(0.06) 0.20(0.11) 0.13(0.13) 0.16(0.09) 0.16(0.07) 0.14(0.07) 0.17(0.04) 0.12(0.07) 0.18(0.11) 0.17(0.09) 0.15(0.03) 0.21(0.08) 0.19(0.13) 0.21(0.10) 0.21(0.06) 0.20(0.03) 0.23(0.11) 0.21(0.11) 0.20(0.04) 0.23(0.07) 0.19(0.08) 0.26(0.12) 0.21(0.12) 0.19(0.05) 0.24(0.06) 0.20(0.09) 0.24(0.13) 0.23(0.10) 0.24(0.06) 0.31(0.09) 0.28(0.04) 0.29(0.05) 0.27(0.03) 0.31(0.05) 0.23(0.09) 0.27(0.08) 0.22(0.06) 0.24(0.05) 0.22(0.07) 0.25(0.08) 0.22(0.10) 0.23(0.05) 0.26(0.03) 0.21(0.07) 0.27(0.10) 0.25(0.10) 0.23(0.07) 0.28(0.06) 0.26(0.04) 0.27(0.04) 0.26(0.01) 0.27(0.06) 0.24(0.11) 0.30(0.12) 0.28(0.10) 0.29(0.07) 0.31(0.08) 0.28(0.07) 0.28(0.06) 0.26(0.05) 0.30(0.04) 0.27(0.04) 0.31(0.06) 0.26(0.06) 0.27(0.03) 0.27(0.02) 0.29(0.07) 0.30(0.09) 0.30(0.09) 0.32(0.06) 0.30(0.03) 0.37(0.09) 0.37(0.05) 0.34(0.07) 0.34(0.02) 0.35(0.06) 0.34(0.09) 0.31(0.06) 0.31(0.04) 0.38(0.10) 0.36(0.12) 0.38(0.11) 0.39(0.07) 0.37(0.05) 0.41(0.05) 0.41(0.04) 0.41(0.03) 0.36(0.07) 0.38(0.07) 0.35(0.08) 0.39(0.12) 0.39(0.10) 0.37(0.05) 0.44(0.08) 0.37(0.07) 0.37(0.03) 0.32(0.06) 0.33(0.07) 0.31(0.05) 0.29(0.03) 0.33(0.07) 0.30(0.09) 0.34(0.07) 0.35(0.08) 0.33(0.03) 0.37(0.07) 0.33(0.10) 0.40(0.13) 0.39(0.09) 0.39(0.04) 0.44(0.09) 0.41(0.12) 0.44(0.12) 0.44(0.09) 0.44(0.06) 0.46(0.07) 0.40(0.08) 0.46(0.07) 0.44(0.06) 0.43(0.08) 0.44(0.06) 0.43(0.04) 0.49(0.07) 0.47(0.07) 0.47(0.06) 0.49(0.05) 0.42(0.07) 0.49(0.07) 0.46(0.08) 0.48(0.08) 0.50(0.07) 0.46(0.04) 0.53(0.08) 0.50(0.05) 0.52(0.06) 0.57(0.06) 0.53(0.06) 0.59(0.07) 0.55(0.05) 0.55(0.04) 0.55(0.06) 0.52(0.08) 0.54(0.09) 0.55(0.08) 0.59(0.04) 0.56(0.11) 0.55(0.07) 0.57(0.02) 0.53(0.07) 0.55(0.09) 0.54(0.08) 0.50(0.05) 0.57(0.10) 0.53(0.09) 0.54(0.06) 0.57(0.06) 0.54(0.05) 0.56(0.05) 0.54(0.04) 0.57(0.04) 0.54(0.08) 0.58(0.11) 0.58(0.10) 0.54(0.06) 0.58(0.04) 0.54(0.05) 0.58(0.06) 0.60(0.08) 0.54(0.06) 0.60(0.06) 0.58(0.04) 0.62(0.05) 0.62(0.02) 0.62(0.05) 0.69(0.09) 0.65(0.08) 0.67(0.04) 0.69(0.05) 0.66(0.06) 0.70(0.05) 0.67(0.05) 0.66(0.04) 0.68(0.05) 0.67(0.07) 0.69(0.09) 0.68(0.06) 0.69(0.05) 0.70(0.03) 0.73(0.05) 0.69(0.10) 0.73(0.12) 0.71(0.11) 0.67(0.07) 0.69(0.03) 0.63(0.06) 0.72(0.10) 0.66(0.06) 0.69(0.05) 0.68(0.03) 0.72(0.05) 0.73(0.06) 0.75(0.09) 0.71(0.09) 0.75(0.08) 0.75(0.07) 0.72(0.05) 0.73(0.07) 0.72(0.08) 0.75(0.06) 0.72(0.04) 0.76(0.06) 0.70(0.10) 0.73(0.10) 0.74(0.08) 0.70(0.05) 0.78(0.09) 0.76(0.08) 0.75(0.08) 0.77(0.05) 0.72(0.05) 0.80(0.08) 0.76(0.08) 0.76(0.08) 0.82(0.07) 0.77(0.05) 0.82(0.05) 0.81(0.01) 0.79(0.04) 0.80(0.06) 0.77(0.06) 0.76(0.06) 0.76(0.01) 0.79(0.05) 0.77(0.08) 0.79(0.10) 0.78(0.09) 0.75(0.07) 0.75(0.05) 0.76(0.06) 0.75(0.04) 0.77(0.03) 0.77(0.05) 0.76(0.06) 0.78(0.09) 0.78(0.10) 0.81(0.05) 0.81(0.03) 0.82(0.04) 0.81(0.09) 0.81(0.12) 0.81(0.09) 0.82(0.05) 0.84(0.03) 0.84(0.05) 0.87(0.08) 0.85(0.13) 0.89(0.11) 0.89(0.10) 0.83(0.06) 0.88(0.06) 0.81(0.08) 0.88(0.09) 0.85(0.06) 0.87(0.06) 0.90(0.06) 0.84(0.07) 0.89(0.06) 0.86(0.05) 0.89(0.08) 0.89(0.07) 0.91(0.07) 0.94(0.09) 0.94(0.09) 0.95(0.06) 0.93(0.04) 0.94(0.03) 0.91(0.04) 0.92(0.05) 0.91(0.05) 0.92(0.06) 0.87(0.09) 0.93(0.13) 0.89(0.13) 0.89(0.08) 0.93(0.06) 0.91(0.07) 0.94(0.07) 0.91(0.04) 0.94(0.04) 0.90(0.06) 0.94(0.06) 0.92(0.03) 0.91(0.06) 0.93(0.08) 0.95(0.06) 0.92(0.04) 0.97(0.05) 0.94(0.04) 0.95(0.08) 0.96(0.10) 0.98(0.07) 0.93(0.05) 0.96(0.08) 0.92(0.11) 0.94(0.06) 0.96(0.05) 0.94(0.11) 0.99(0.08) 1.02(0.05) 0.99(0.03) 1.00(0.04) 0.94(0.10) 0.98(0.09) 0.95(0.11) 0.97(0.10) 0.97(0.09) 0.97(0.05) 0.97(0.03) 0.98(0.04) 0.97(0.03) 1.01(0.06) 0.98(0.07) 0.98(0.06) 1.03(0.06) 1.00(0.04) 1.06(0.08) 1.01(0.08) 1.03(0.07) 1.05(0.06) 1.07(0.08) 1.07(0.10) 1.05(0.07) 1.06(0.05) 1.03(0.05) 1.04(0.07) 1.04(0.04) 1.05(0.06) 1.08(0.07) 1.06(0.06) 1.10(0.06) 1.11(0.02) 1.13(0.04) 1.13(0.06) 1.12(0.08) 1.12(0.08) 1.08(0.06) 1.09(0.03) 1.07(0.04) 1.09(0.06) 1.07(0.09) 1.10(0.07) 1.10(0.04) 1.08(0.12) 1.07(0.10) 1.10(0.06) 1.06(0.05) 1.11(0.06) 1.07(0.08) 1.08(0.06) 1.10(0.08) 1.06(0.06) 1.11(0.05) 1.08(0.05) 1.11(0.06) 1.13(0.09) 1.10(0.09) 1.12(0.06) 1.11(0.03) 1.15(0.05) 1.10(0.10) 1.17(0.13) 1.13(0.12) 1.10(0.07) 1.16(0.07) 1.12(0.07) 1.17(0.12) 1.15(0.08) 1.12(0.05) 1.18(0.08) 1.16(0.07) 1.19(0.08) 1.19(0.08) 1.16(0.07) 1.17(0.07) 1.16(0.02) 1.19(0.04) 1.15(0.09) 1.20(0.13) 1.16(0.12) 1.17(0.08) 1.22(0.06) 1.19(0.08) 1.21(0.04) 1.18(0.09) 1.19(0.09) 1.19(0.07) 1.16(0.08) 1.23(0.08) 1.16(0.09) 1.19(0.07) 1.20(0.08) 1.20(0.10) 1.17(0.10) 1.18(0.04) 1.20(0.05) 1.17(0.12) 1.28(0.16) 1.24(0.10) 1.20(0.05) 1.27(0.09) 1.23(0.11) 1.25(0.07) 1.25(0.05) 1.22(0.07) 1.25(0.05) 1.24(0.03) 1.26(0.04) 1.21(0.08) 1.22(0.10) 1.22(0.09) 1.21(0.07) 1.21(0.06) 1.22(0.03)
++ Max displacement in automask = 1.28 (mm) at sub-brick 488
++ Max delta displ  in automask = 0.16 (mm) at sub-brick 488
++ Wrote dataset to disk in ./rm.epi.volreg.r01+orig.BRIK
3dcalc -overwrite -a pb01.sub-ADS5115.r01.despike+orig -expr 1 -prefix rm.epi.all1
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
[7m*+ WARNING:[0m input 'a' is not used in the expression
++ Output dataset ./rm.epi.all1+orig.BRIK
cat_matvec -ONELINE sub-ADS5115_SurfVol_al_junk_mat.aff12.1D -I mat.r01.vr.aff12.1D
3dAllineate -base sub-ADS5115_SurfVol_ns+orig -input pb01.sub-ADS5115.r01.despike+orig -1Dmatrix_apply mat.r01.warp.aff12.1D -mast_dxyz 3 -prefix rm.epi.nomask.r01
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb01.sub-ADS5115.r01.despike+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb01.sub-ADS5115.r01.despike+orig.BRIK is 4.700030 degrees from plumb.
++ Source dataset: ./pb01.sub-ADS5115.r01.despike+orig.HEAD
++ Base dataset:   ./sub-ADS5115_SurfVol_ns+orig.HEAD
++ Loading datasets
++ master dataset for output = base
++ changing output grid spacing to 3.0000 mm
++ OpenMP thread count = 1
++ ========== Applying transformation to 505 sub-bricks ==========
volume 0..1..2..3..4..5..6..7..8..9..10..11..12..13..14..15..16..17..18..19..20..21..22..23..24..25..26..27..28..29..30..31..32..33..34..35..36..37..38..39..40..41..42..43..44..45..46..47..48..49..50..51..52..53..54..55..56..57..58..59..60..61..62..63..64..65..66..67..68..69..70..71..72..73..74..75..76..77..78..79..80..81..82..83..84..85..86..87..88..89..90..91..92..93..94..95..96..97..98..99..100..101..102..103..104..105..106..107..108..109..110..111..112..113..114..115..116..117..118..119..120..121..122..123..124..125..126..127..128..129..130..131..132..133..134..135..136..137..138..139..140..141..142..143..144..145..146..147..148..149..150..151..152..153..154..155..156..157..158..159..160..161..162..163..164..165..166..167..168..169..170..171..172..173..174..175..176..177..178..179..180..181..182..183..184..185..186..187..188..189..190..191..192..193..194..195..196..197..198..199..200..201..202..203..204..205..206..207..208..209..210..211..212..213..214..215..216..217..218..219..220..221..222..223..224..225..226..227..228..229..230..231..232..233..234..235..236..237..238..239..240..241..242..243..244..245..246..247..248..249..250..251..252..253..254..255..256..257..258..259..260..261..262..263..264..265..266..267..268..269..270..271..272..273..274..275..276..277..278..279..280..281..282..283..284..285..286..287..288..289..290..291..292..293..294..295..296..297..298..299..300..301..302..303..304..305..306..307..308..309..310..311..312..313..314..315..316..317..318..319..320..321..322..323..324..325..326..327..328..329..330..331..332..333..334..335..336..337..338..339..340..341..342..343..344..345..346..347..348..349..350..351..352..353..354..355..356..357..358..359..360..361..362..363..364..365..366..367..368..369..370..371..372..373..374..375..376..377..378..379..380..381..382..383..384..385..386..387..388..389..390..391..392..393..394..395..396..397..398..399..400..401..402..403..404..405..406..407..408..409..410..411..412..413..414..415..416..417..418..419..420..421..422..423..424..425..426..427..428..429..430..431..432..433..434..435..436..437..438..439..440..441..442..443..444..445..446..447..448..449..450..451..452..453..454..455..456..457..458..459..460..461..462..463..464..465..466..467..468..469..470..471..472..473..474..475..476..477..478..479..480..481..482..483..484..485..486..487..488..489..490..491..492..493..494..495..496..497..498..499..500..501..502..503..504
++ Output dataset ./rm.epi.nomask.r01+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 55.8
++ ###########################################################
3dAllineate -base sub-ADS5115_SurfVol_ns+orig -input rm.epi.all1+orig -1Dmatrix_apply mat.r01.warp.aff12.1D -mast_dxyz 3 -final NN -quiet -prefix rm.epi.1.r01
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./rm.epi.all1+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./rm.epi.all1+orig.BRIK is 4.700030 degrees from plumb.
++ Output dataset ./rm.epi.1.r01+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 51.0
3dTstat -min -prefix rm.epi.min.r01 rm.epi.1.r01+orig
++ 3dTstat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: KR Hammett & RW Cox
++ Output dataset ./rm.epi.min.r01+orig.BRIK
end
cat dfile.r01.1D
3dcopy rm.epi.min.r01+orig mask_epi_extents
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
foreach run ( 01 )
3dcalc -a rm.epi.nomask.r01+orig -b mask_epi_extents+orig -expr a*b -prefix pb02.sub-ADS5115.r01.volreg
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ Output dataset ./pb02.sub-ADS5115.r01.volreg+orig.BRIK
end
cat_matvec -ONELINE sub-ADS5115_SurfVol_al_junk_mat.aff12.1D -I
3dAllineate -base sub-ADS5115_SurfVol_ns+orig -input vr_base_min_outlier+orig -1Dmatrix_apply mat.basewarp.aff12.1D -mast_dxyz 3 -prefix final_epi_vr_base_min_outlier
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./vr_base_min_outlier+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./vr_base_min_outlier+orig.BRIK is 4.700030 degrees from plumb.
++ Source dataset: ./vr_base_min_outlier+orig.HEAD
++ Base dataset:   ./sub-ADS5115_SurfVol_ns+orig.HEAD
++ Loading datasets
++ master dataset for output = base
++ changing output grid spacing to 3.0000 mm
++ OpenMP thread count = 1
++ ========== Applying transformation to 1 sub-bricks ==========
++ Output dataset ./final_epi_vr_base_min_outlier+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 0.4
++ ###########################################################
3dcopy sub-ADS5115_SurfVol_ns+orig anat_final.sub-ADS5115
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
tee out.allcostX.txt
3dAllineate -base final_epi_vr_base_min_outlier+orig -allcostX -input anat_final.sub-ADS5115+orig
3dmask_tool -input copy_af_FSvent+orig -dilate_input -1 -prefix copy_af_FSvent_erode
++ no -frac option: defaulting to -union
++ processing 1 input datasets...
++ padding all datasets by 0 (for dilations)
++ frac 0 over 1 volumes gives min count 0
++ voxel limits: 0 clipped, 1722 survived, 16775494 were zero
++ writing result copy_af_FSvent_erode...
++ Output dataset ./copy_af_FSvent_erode+orig.BRIK
3dmask_tool -input copy_af_FSWe+orig -dilate_input -1 -prefix copy_af_FSWe_erode
++ no -frac option: defaulting to -union
++ processing 1 input datasets...
++ padding all datasets by 0 (for dilations)
++ frac 0 over 1 volumes gives min count 0
++ voxel limits: 0 clipped, 224779 survived, 16552437 were zero
++ writing result copy_af_FSWe_erode...
++ Output dataset ./copy_af_FSWe_erode+orig.BRIK
3dAllineate -source copy_af_aeseg+orig -master pb02.sub-ADS5115.r01.volreg+orig -final NN -1Dparam_apply 1D: 12@0' -prefix follow_ROI_aeseg
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
++ Source dataset: ./copy_af_aeseg+orig.HEAD
++ Base dataset:   (not given)
++ Loading datasets
++ OpenMP thread count = 1
++ ========== Applying transformation to 1 sub-bricks ==========
++ Output dataset ./follow_ROI_aeseg+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 0.9
++ ###########################################################
3dAllineate -source copy_af_FSvent_erode+orig -master pb02.sub-ADS5115.r01.volreg+orig -final NN -1Dparam_apply 1D: 12@0' -prefix follow_ROI_FSvent
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
++ Source dataset: ./copy_af_FSvent_erode+orig.HEAD
++ Base dataset:   (not given)
++ Loading datasets
++ OpenMP thread count = 1
++ ========== Applying transformation to 1 sub-bricks ==========
++ Output dataset ./follow_ROI_FSvent+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 0.7
++ ###########################################################
3dAllineate -source copy_af_FSWe_erode+orig -master pb02.sub-ADS5115.r01.volreg+orig -final NN -1Dparam_apply 1D: 12@0' -prefix follow_ROI_FSWe
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
++ Source dataset: ./copy_af_FSWe_erode+orig.HEAD
++ Base dataset:   (not given)
++ Loading datasets
++ OpenMP thread count = 1
++ ========== Applying transformation to 1 sub-bricks ==========
++ Output dataset ./follow_ROI_FSWe+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 0.6
++ ###########################################################
foreach run ( 01 )
3dmerge -1blur_fwhm 2 -doall -prefix pb03.sub-ADS5115.r01.blur pb02.sub-ADS5115.r01.volreg+orig
++ 3dmerge: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ default -1dindex = 0
++ default -1tindex = 1
-- Wrote edited dataset: ./pb03.sub-ADS5115.r01.blur+orig.BRIK
end
foreach run ( 01 )
3dAutomask -prefix rm.mask_r01 pb03.sub-ADS5115.r01.blur+orig
++ 3dAutomask: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Emperor Zhark
++ Loading dataset pb03.sub-ADS5115.r01.blur+orig
++ Forming automask
